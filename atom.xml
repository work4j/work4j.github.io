<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Work4j</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-02T08:37:48.245Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小万万</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java面试题汇总</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题汇总/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-02T08:37:48.245Z</updated>
    
    <content type="html"><![CDATA[<p>​        Java面试题汇总，分十九块个模块进行总结，点击标题可以查看答案：</p><h2 id="一、Java基础"><a href="#一、Java基础" class="headerlink" title="一、Java基础"></a><a href="/2019/03/13/java面试/Java面试题（一）Java基础">一、Java基础</a></h2><ol><li>JDK和JRE有什么区别？</li><li>== 和 equals 的区别是什么？</li><li>两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</li><li>final 在 java 中有什么作用？</li><li>java 中的 Math.round(-1.5) 等于多少？</li><li>String 属于基础的数据类型吗？</li><li>java 中操作字符串都有哪些类？它们之间有什么区别？</li><li>String str=”i”与 String str=new String(“i”)一样吗？</li><li>如何将字符串反转？</li><li>String 类的常用方法都有那些？</li><li>抽象类必须要有抽象方法吗？</li><li>普通类和抽象类有哪些区别？</li><li>抽象类能使用 final 修饰吗？</li><li>接口和抽象类有什么区别？</li><li>java 中 IO 流分为几种？</li><li>BIO、NIO、AIO 有什么区别？</li><li>Files的常用方法都有哪些？</li><li>谈谈对java异常机制的理解。</li></ol><h2 id="二、容器"><a href="#二、容器" class="headerlink" title="二、容器"></a><a href="/2019/03/13/java面试/Java面试题（二）容器">二、容器</a></h2><ol><li>java 容器都有哪些？</li><li>Collection 和 Collections 有什么区别？</li><li>List、Set、Map 之间的区别是什么？</li><li>HashMap 和 Hashtable 有什么区别？</li><li>如何决定使用 HashMap 还是 TreeMap？</li><li>说一下 HashMap 的实现原理？</li><li>说一下 HashSet 的实现原理？</li><li>ArrayList 和 LinkedList 的区别是什么？</li><li>如何实现数组和 List 之间的转换？</li><li>ArrayList 和 Vector 的区别是什么？</li><li>Array 和 ArrayList 有何区别？</li><li>在 Queue 中 poll()和 remove()有什么区别？</li><li>哪些集合类是线程安全的？</li><li>迭代器 Iterator 是什么？</li><li>Iterator 怎么使用？有什么特点？</li><li>Iterator 和 ListIterator 有什么区别？</li></ol><h2 id="三、网络"><a href="#三、网络" class="headerlink" title="三、网络"></a><a href="/2019/03/13/java面试/Java面试题汇总（三）网络">三、网络</a></h2><ol><li>OSI 的七层模型都有哪些？</li><li>说说TCP的三次握手。</li><li>为什么需要三次握手才能建立起连接，两次不行吗，为什么？</li><li>谈谈TCP的四次挥手。</li></ol><h2 id="四、Redis"><a href="#四、Redis" class="headerlink" title="四、Redis"></a><a href="/2019/03/13/java面试/Java面试题汇总（四）Redis">四、Redis</a></h2><ol><li>Redis和Memecache有什么区别？</li><li>为什么Redis能这么快？</li><li>Redis的使用场景都有哪些？</li></ol><h2 id="五、Linux"><a href="#五、Linux" class="headerlink" title="五、Linux"></a><a href="/2019/03/13/java面试/Java面试题（五）Linux">五、Linux</a></h2><ol><li>常用的查看文件内容命令有哪些？</li><li>怎么查找特定的文件？</li><li>怎么对文件内容做统计？</li><li>怎样给文件或目录授权？</li></ol><h2 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a><a href="/2019/03/13/java面试/Java面试题（六）多线程">六、多线程</a></h2><ol><li>都十分生动</li></ol><h2 id="七、JVM"><a href="#七、JVM" class="headerlink" title="七、JVM"></a><a href="/2019/03/13/java面试/Java面试题（七）JVM">七、JVM</a></h2><ol><li>双方都三</li></ol><h2 id="八、MySql"><a href="#八、MySql" class="headerlink" title="八、MySql"></a><a href="/2019/03/13/java面试/Java面试题（八）MySql">八、MySql</a></h2><ol><li>地方撒</li></ol><h2 id="九、MyBatis"><a href="#九、MyBatis" class="headerlink" title="九、MyBatis"></a><a href="/2019/03/13/java面试/Java面试题（九）MyBatis">九、MyBatis</a></h2><ol><li><h2 id="十、Spring"><a href="#十、Spring" class="headerlink" title="十、Spring"></a><a href="/2019/03/13/java面试/Java面试题（十）Spring">十、Spring</a></h2></li></ol><ol><li><h2 id="十一、SpringMVC"><a href="#十一、SpringMVC" class="headerlink" title="十一、SpringMVC"></a><a href="/2019/03/13/java面试/Java面试题（十一）SpringMVC">十一、SpringMVC</a></h2></li></ol><ol><li><h2 id="十二、SpringBoot"><a href="#十二、SpringBoot" class="headerlink" title="十二、SpringBoot"></a><a href="/2019/03/13/java面试/Java面试题（十二）SpringBoot">十二、SpringBoot</a></h2></li></ol><ol><li><h2 id="十三、SpringCloud"><a href="#十三、SpringCloud" class="headerlink" title="十三、SpringCloud"></a><a href="/2019/03/13/java面试/Java面试题（十三）SpringCloud">十三、SpringCloud</a></h2></li></ol><ol><li><h2 id="十四、RabbitMQ"><a href="#十四、RabbitMQ" class="headerlink" title="十四、RabbitMQ"></a><a href="/2019/03/13/java面试/Java面试题（十四）RabbitMQ">十四、RabbitMQ</a></h2></li></ol><ol><li><h2 id="十五、设计模式"><a href="#十五、设计模式" class="headerlink" title="十五、设计模式"></a><a href="/2019/03/13/java面试/Java面试题（十五）设计模式">十五、设计模式</a></h2></li></ol><ol><li><h2 id="十六、其他"><a href="#十六、其他" class="headerlink" title="十六、其他"></a><a href="/2019/03/13/java面试/Java面试题（十六）其他">十六、其他</a></h2></li></ol><ol><li>KafKa</li><li>Netty</li><li>认证授权</li><li>数据结构</li><li>算法</li><li>操作系统</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        Java面试题汇总，分十九块个模块进行总结，点击标题可以查看答案：&lt;/p&gt;
&lt;h2 id=&quot;一、Java基础&quot;&gt;&lt;a href=&quot;#一、Java基础&quot; class=&quot;headerlink&quot; title=&quot;一、Java基础&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/20
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（一）Java基础</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89Java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（一）Java基础/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-03T03:12:45.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（一）Java基础"><a href="#Java面试题汇总（一）Java基础" class="headerlink" title="Java面试题汇总（一）Java基础"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（一）Java基础</h2><h4 id="JDK和JRE有什么区别？"><a href="#JDK和JRE有什么区别？" class="headerlink" title="JDK和JRE有什么区别？"></a>JDK和JRE有什么区别？</h4><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li></ul><p>其实JDK包含了JRE，同时还包含了编辑java源码的编译器javac，还包含了很多java程序调试和分析的工具，简单来说：如果你需要运行java程序，只需要安装JRE就可以了，如果你还需要编写java程序，需要安装JDK。</p><h4 id="和-equals-的区别是什么？"><a href="#和-equals-的区别是什么？" class="headerlink" title="== 和 equals 的区别是什么？"></a>== 和 equals 的区别是什么？</h4><p>==对于基本类型比较的是值，对于引用类型比较的是引用（内存地址）。</p><p>equals是Object类的一个方法，它里面返回的就是==的判断，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，那它就是比较的内存地址。但是实际应用中，我们往往重写equals方法，来比较两个对象的内容是否相等，比如我们常用的String，Integer等类，它们就重写了equals方法，比较的是对象里的内容。</p><p><strong>java.lang.Object类里的equals方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java.lang.String类里的equals方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong> ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h4 id="两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h4><p>错，两个对象的 hashCode()相同， equals()不一定为 true。</p><p>——》单独文章说明。</p><h4 id="final-在-java-中有什么作用？"><a href="#final-在-java-中有什么作用？" class="headerlink" title="final 在 java 中有什么作用？"></a>final 在 java 中有什么作用？</h4><ul><li>final 修饰的类叫最终类，该类不能被继承；</li><li>final 修饰的方法不能被重写，但是可以被重载；</li><li>final 修饰的变量叫常量，常量使用时必须被初始化， 初始化之后就不能被修改。final修饰的变量一些情况下可以先声明后赋值：1.类里面的成员变量可以先声明，在代码块或者构造函数里面赋值，有多个构造函数时，每个构造函数里都需要赋值。2.方法里的变量可以先声明，使用时必须先赋值。</li></ul><h4 id="java-中的-Math-round-1-5-等于多少？"><a href="#java-中的-Math-round-1-5-等于多少？" class="headerlink" title="java 中的 Math.round(-1.5) 等于多少？"></a>java 中的 Math.round(-1.5) 等于多少？</h4><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p><p>round() 方法返回一个最接近的 int、long 型值，四舍五入。算法为<strong>Math.floor(x+0.5)</strong> ，即将原来的数字加上 0.5 后再向下取整，所以 Math.round(11.5) 的结果为 12，Math.round(-11.5) 的结果为 -11，语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br></pre></td></tr></table></figure><h4 id="String-属于基础的数据类型吗？"><a href="#String-属于基础的数据类型吗？" class="headerlink" title="String 属于基础的数据类型吗？"></a>String 属于基础的数据类型吗？</h4><p>String是引用类型，不属于基础的数据类型。基础数据类型有8种：byte，short，int，long，float，double，char，boolean。</p><h4 id="java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="java 中操作字符串都有哪些类？它们之间有什么区别？"></a>java 中操作字符串都有哪些类？它们之间有什么区别？</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h4 id="String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="String str=”i”与 String str=new String(“i”)一样吗？"></a>String str=”i”与 String str=new String(“i”)一样吗？</h4><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java虚拟机会将其分配到常量池中；而String str=new String(“i”)则会被分配到堆内存中。</p><h4 id="如何将字符串反转？"><a href="#如何将字符串反转？" class="headerlink" title="如何将字符串反转？"></a>如何将字符串反转？</h4><p>使用 StringBuilder 或者 StringBuffer 类的 reverse() 方法。</p><h4 id="String-类的常用方法都有那些？"><a href="#String-类的常用方法都有那些？" class="headerlink" title="String 类的常用方法都有那些？"></a>String 类的常用方法都有那些？</h4><ul><li>indexOf()：返回指定字符的索引；</li><li>charAt()：返回指定索引处的字符；</li><li>split()：根据指定字符串进行分割字符串，返回一个String数组；</li><li>substring()：截取字符串；</li><li>replace()：字符串替换；</li><li>equals()：字符串比较；</li><li>trim()：去除字符串两端空白；</li><li>getBytes()：返回字符串的byte类型数据；</li><li>length()：返回字符串的长度；</li><li>toLowerCase()：将字符串转为小写字母；</li><li>toUpperCase()：将字符串转为大写字母；</li></ul><h4 id="抽象类必须要有抽象方法吗？"><a href="#抽象类必须要有抽象方法吗？" class="headerlink" title="抽象类必须要有抽象方法吗？"></a>抽象类必须要有抽象方法吗？</h4><p>不需要，抽象类不一定非要有抽象方法。</p><h4 id="普通类和抽象类有哪些区别？"><a href="#普通类和抽象类有哪些区别？" class="headerlink" title="普通类和抽象类有哪些区别？"></a>普通类和抽象类有哪些区别？</h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法；</li><li>普通类可以直接实例化，抽象类不能直接实例化。</li></ul><h4 id="抽象类能使用-final-修饰吗？"><a href="#抽象类能使用-final-修饰吗？" class="headerlink" title="抽象类能使用 final 修饰吗？"></a>抽象类能使用 final 修饰吗？</h4><p>不能，抽象类就是让其他类继承的，被final修饰的类不能被继承，这样就矛盾了，所以抽象类不能使用final修饰。</p><h4 id="接口和抽象类有什么区别？"><a href="#接口和抽象类有什么区别？" class="headerlink" title="接口和抽象类有什么区别？"></a>接口和抽象类有什么区别？</h4><ul><li>实现：接口是被实现的，使用implements来实现接口，而抽象类是被继承的，用extends来继承；</li><li>构造函数：接口没有构造函数，抽象类有；</li><li>实现数量：类可以实现多个接口，但是只能继承一个抽象类；</li><li>访问修饰符：接口中的方法默认使用public修饰；抽象类中的方法可以是任意访问修饰符。</li></ul><h4 id="java-中-IO-流分为几种？"><a href="#java-中-IO-流分为几种？" class="headerlink" title="java 中 IO 流分为几种？"></a>java 中 IO 流分为几种？</h4><p>按功能来分有两种：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按8位传输以字节为单位输入输出数据，字符流按16位传输以字符流为单位输入输出数据。</p><h4 id="BIO、NIO、AIO-有什么区别？"><a href="#BIO、NIO、AIO-有什么区别？" class="headerlink" title="BIO、NIO、AIO 有什么区别？"></a>BIO、NIO、AIO 有什么区别？</h4><ul><li>BIO：Block IO 同步阻塞式IO，平时使用的传统IO，模式简单使用方便，但是并发处理能力低；</li><li>NIO：New IO 同步非阻塞IO，传统IO的升级，客户端和服务端通过Channel（通道）通讯，实现了多路复用；</li><li>AIO：Asynchronous IO 是 NIO 的升级，又称为 NIO2，实现了异步非阻塞IO，异步IO的操作基于事件和回调机制。</li></ul><h4 id="Files的常用方法都有哪些？"><a href="#Files的常用方法都有哪些？" class="headerlink" title="Files的常用方法都有哪些？"></a>Files的常用方法都有哪些？</h4><p>java.nio.file.Files：</p><ul><li>Files.exists()：检测文件是否存在；</li><li>Files.createFile()：创建文件；</li><li>FIles.createDirectory()：创建文件夹；</li><li>Files.delete()：删除文件；</li><li>Files.copy()：复制文件；</li><li>Files.move()：移动文件；</li><li>FIles.size()：查看文件个数；</li><li>Files.read()：读取文件；</li><li>FIles.write()：写入文件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（一）Java基础&quot;&gt;&lt;a href=&quot;#Java面试题汇总（一）Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（一）Java基础&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13/java面试/Java
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（三）网络</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（三）网络/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-03T14:17:34.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（三）网络"><a href="#Java面试题汇总（三）网络" class="headerlink" title="Java面试题汇总（三）网络"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（三）网络</h2><h4 id="OSI-的七层模型都有哪些？"><a href="#OSI-的七层模型都有哪些？" class="headerlink" title="OSI 的七层模型都有哪些？"></a>OSI 的七层模型都有哪些？</h4><ol><li>物理层：主要定义了物理设备的标准，如网线的类型、光纤的接口类型、各种传输介质的传输速率等，主要作用是传输比特流，将0101二进制码转换为电流强弱，传输到目的地后再解析为0101的二级制机器码。<strong>网卡</strong>就是工作在这一层的。</li><li>数据链路层：将比特数据转换成了帧，<strong>交换机</strong>就工作在这一层，对帧解码，并把帧中包含的信息正确的发送到接收方。</li><li>网络层：将网络地址翻译成对应的物理地址，并决定数据如何从发送方路由到接收方。<strong>路由器</strong>、IP协议在这一层。</li><li>传输层：解决了主机间的数据传输，传输质量，流量控制，数据分割传输及排序等。TCP、UDP。</li><li>会话层：建立和管理应用程序之间的通信，自动收发包和寻址。</li><li>表示层：解决不同系统之间通信语法的问题。</li><li>应用层：规定了发送方和接收方使用一个固定的消息头等信息，方便接收方解析发送方的数据。HTTP</li></ol><h4 id="说说TCP的三次握手？"><a href="#说说TCP的三次握手？" class="headerlink" title="说说TCP的三次握手？"></a>说说TCP的三次握手？</h4><p>在TCP/IP协议中，TCP协议提供了可靠的连接服务，采用三次握手建立一个连接。</p><p>第一次握手：建立连接时，客户端发送SYN包（seq=x）到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p>第二次握手：服务端收到SYN包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（seq=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务端的SYN+ACK包，向服务端发送确认包ACK（ack=y+1），此包发送完毕后，客户端和服务端都进入ESTABLISHED状态，完成三次握手。</p><p>之所以需要三次握手，一是为了保证双方都能确认自己和对方的发送和接收是正常的，二是为了初始化sequence number的初始值，因为TCP需要根据该值，保证序号不会乱序，能够正确的拼接数据。</p><p>首次握手的隐患——SYN超时，服务端收到客户端的SYN包，并发送了SYN+ACK包后没有收到回复，服务端会不断重试直至超时，Linux默认63秒后才断开连接。</p><p>同时会有SYN Flood防护机制（SYN Cookie），保活机制（发送保活探测报文）来应对各种情况。</p><h4 id="说说TCP的四次挥手？"><a href="#说说TCP的四次挥手？" class="headerlink" title="说说TCP的四次挥手？"></a>说说TCP的四次挥手？</h4><p>挥手是为了终止连接。</p><p>第一次挥手：客户端发送一个FIN，用来关闭客户端到服务端的数据传输，客户端进入FIN_WAIT_1状态；</p><p>第二次挥手：服务端能收到FIN后，发送一个ACK给到客户端，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），服务端进入CLOSE_WAIT状态；</p><p>第三次挥手：服务端发送一个FIN，用来关闭服务端到客户端的数据传输，服务端进入LAST_ACK状态；</p><p>第四次挥手：客户端收到FIN后，客户端进入TIME_WAIT状态，接着发送一个ACK给服务端，确认序号为收到序号+1，服务端进入CLOSED状态，完成四次挥手。</p><p>之所以有TIME_WAIT状态，一是为了确保有足够的时间让对方收到ACK包，二是避免新旧连接混淆。</p><p>需要四次挥手是因为全双工（通信允许数据在两个方向上同时传输），发送方和接收方都需要FIN报文和ACK报文，所以一方的2次挥手乘以双方，就是四次挥手了。</p><p>举个例⼦：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可 能还会有要说的话，A 不能要求 B 跟着⾃⼰的节奏结束通话，于是 B 可能⼜巴拉巴拉说了⼀通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p><h4 id="TCP和UDP的区别？"><a href="#TCP和UDP的区别？" class="headerlink" title="TCP和UDP的区别？"></a>TCP和UDP的区别？</h4><ul><li>TCP面向连接，UDP无连接</li><li>TCP可靠，UDP不可靠</li><li>TCP有序，UDP无序</li><li>TCP所需资源多，传输效率比UDP慢</li><li>TCP适合需要可靠传输的场景，比如：文件传输、发送和接收邮件等，UDP适合不需要确认回复的场景，比如即时通信、QQ语音、视频、直播等</li></ul><h4 id="TCP协议如何保证可靠传输？"><a href="#TCP协议如何保证可靠传输？" class="headerlink" title="TCP协议如何保证可靠传输？"></a>TCP协议如何保证可靠传输？</h4><ul><li>数据分割传输，每个包进行编号，接收方进行排序。</li><li><strong>流量控制</strong>：TCP通过<strong>滑动窗口</strong>实现流量控制，流量控制是为了控制发送方发送速率，保证接收方来得及接收。</li><li><strong>阻塞控制</strong>：当网络阻塞时，减少数据的发送。</li><li><strong>ARQ协议</strong>：自动重传请求。基本原理是每发完一个分组就停止发送，等待对方确认，收到确认后再发送下一分组。</li><li><strong>超时重传</strong>：当TCP发出一个段后，启动一个定时器，等待接收端确认收到这个报文段，如果不能及时的收到一个确认，将会重发这个报文段。</li></ul><h4 id="在浏览器中输入url地址-gt-gt-显示主页的过程？"><a href="#在浏览器中输入url地址-gt-gt-显示主页的过程？" class="headerlink" title="在浏览器中输入url地址 -&gt;&gt; 显示主页的过程？"></a>在浏览器中输入url地址 -&gt;&gt; 显示主页的过程？</h4><ol><li><strong>DNS解析</strong>，浏览器查找域名的IP地址（DNS查找过程：浏览器缓存、路由器缓存、DNS缓存）</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><h4 id="状态码有哪些？"><a href="#状态码有哪些？" class="headerlink" title="状态码有哪些？"></a>状态码有哪些？</h4><ul><li>1xx：指示信息——表示请求已接收，正在处理</li><li>2xx：成功——表示请求正常处理完毕</li><li>3xx：重定向——表示需要完成请求必须进行进一步的操作</li><li>4xx：客户端错误——表示请求有语法错误或者请求无法实现</li><li>5xx：服务器端错误——表示服务器处理请求出错</li></ul><h4 id="GET请求和POST请求的区别？"><a href="#GET请求和POST请求的区别？" class="headerlink" title="GET请求和POST请求的区别？"></a>GET请求和POST请求的区别？</h4><ul><li>GET请求的信息放在URL（有长度限制），POST放在请求体。</li><li>GET符合幂等性和安全性，POST不符合。GET一般是查询获取资源的，不会对数据造成改变，相对安全。而POST会对数据发生改变。</li><li>GET可以被缓存（浏览器历史记录）、被存储（浏览器书签），而POST不行。GET请求被缓存，CDN加速，可以缓解服务器压力。</li></ul><p>幂等性：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。</p><h4 id="？"><a href="#？" class="headerlink" title="？"></a>？</h4><p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（三）网络&quot;&gt;&lt;a href=&quot;#Java面试题汇总（三）网络&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（三）网络&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13/java面试/Java面试题汇总/&quot;&gt;Java
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（二）容器</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（二）容器/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-03T08:35:38.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（二）容器"><a href="#Java面试题汇总（二）容器" class="headerlink" title="Java面试题汇总（二）容器"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（二）容器</h2><h4 id="java-容器都有哪些？"><a href="#java-容器都有哪些？" class="headerlink" title="java 容器都有哪些？"></a>java 容器都有哪些？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">Conllection--&gt;List</span><br><span class="line">Conllection--&gt;Queue</span><br><span class="line">Conllection--&gt;Set</span><br><span class="line">List--&gt;Vector--&gt;Stack</span><br><span class="line">List--&gt;ArrayList</span><br><span class="line">List--&gt;LinkedList</span><br><span class="line">Queue--&gt;LinkedList</span><br><span class="line">Queue--&gt;PriorityQueue</span><br><span class="line">Set--&gt;HashSet--&gt;LinkedHashSet</span><br><span class="line">Set--&gt;TreeSet</span><br><span class="line">Map--&gt;HashMap</span><br><span class="line">Map--&gt;TreeMap</span><br></pre></td></tr></table></figure><p><img src="/uploads/image-20200703151934276.png" alt="image-20200703151934276"></p><h4 id="Collection-和-Collections-有什么区别？"><a href="#Collection-和-Collections-有什么区别？" class="headerlink" title="Collection 和 Collections 有什么区别？"></a>Collection 和 Collections 有什么区别？</h4><ul><li><p>java.util.Collection是一个集合接口（集合类的顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List和Set。</p></li><li><p>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p></li></ul><h4 id="List、Set、Map-之间的区别是什么？"><a href="#List、Set、Map-之间的区别是什么？" class="headerlink" title="List、Set、Map 之间的区别是什么？"></a>List、Set、Map 之间的区别是什么？</h4><table><thead><tr><th style="text-align:center">比较</th><th style="text-align:center">List</th><th style="text-align:center">Set</th><th style="text-align:center">Map</th></tr></thead><tbody><tr><td style="text-align:center">继承接口</td><td style="text-align:center">Collection</td><td style="text-align:center">Collection</td><td style="text-align:center">–</td></tr><tr><td style="text-align:center">常见实现类</td><td style="text-align:center">ArrayList、LinkedList、Vector</td><td style="text-align:center">HashSet、LinkedHashSet、TreeSet</td><td style="text-align:center">HashMap、HashTable、TreeMap</td></tr><tr><td style="text-align:center">常见方法</td><td style="text-align:center">add()、remove()、clear()、get()、contains()、size()</td><td style="text-align:center">add()、remove()、clear()、contains()、size()</td><td style="text-align:center">put()、get()、remove()、clear()、containsKey()、containsValue()、keySet()、values()、size()</td></tr><tr><td style="text-align:center">元素</td><td style="text-align:center">可重复</td><td style="text-align:center">不可重复（用equals()判断）</td><td style="text-align:center">key不可重复</td></tr><tr><td style="text-align:center">顺序</td><td style="text-align:center">有序</td><td style="text-align:center">无序（实际上有HashCode决定）</td><td style="text-align:center">–</td></tr><tr><td style="text-align:center">线程安全</td><td style="text-align:center">Vector线程安全</td><td style="text-align:center">–</td><td style="text-align:center">HashTable线程安全</td></tr></tbody></table><h4 id="HashMap-和-HashTable-有什么区别？"><a href="#HashMap-和-HashTable-有什么区别？" class="headerlink" title="HashMap 和 HashTable 有什么区别？"></a>HashMap 和 HashTable 有什么区别？</h4><ul><li>HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法；</li><li>HashMap是非线程安全的，HashTable是线程安全的，HashMap效率上比HashTable要高；</li><li>HashMap允许空键值，而HashTable不允许。</li></ul><h4 id="说一下-HashMap-的实现原理？"><a href="#说一下-HashMap-的实现原理？" class="headerlink" title="说一下 HashMap 的实现原理？"></a>说一下 HashMap 的实现原理？</h4><p>HashMap在JDK1.8之前底层是<strong>数组+链表</strong>的形式。HashMap通过key的hashCode经过扰动函数处理后得到的hash值，然后通过（n-1）&amp; hash 判断当前元素存放的位置，这里的n指的是数组的长度，如果当前位置存在元素的话，就判断该元素与要存入的元素的hash值以及key是否相同，如果相同的话，直接覆盖，不相同的话，通过拉链法解决冲突（拉链法就是遇到哈希冲突时，创建一个链表，将冲突的值加入到链表中）。</p><p>所谓的扰动函数就是HashMap的hash方法，使用扰动函数是为了防止一些实现比较差的hashCode()方法，其目的就是为了较少碰撞。不然遇到实现比较差的hashCode()方法的key，大量的落在同一个存放位置，会使得链表过长，查询效率低。</p><p>在JDK1.8之后，HashMap的底层使用<strong>数组+链表+红黑树</strong>的形式。当链表的长度大于阈值（默认是8）的时候，就会转化为红黑树，以减少搜索时间。TreeMap、TreeSet的底层也用到了红黑树，红黑树相较于二叉树，解决了在特殊情况下二叉树退化成一个线性结构的缺陷。</p><h4 id="HashMap-的长度为什么是2的幂次方？"><a href="#HashMap-的长度为什么是2的幂次方？" class="headerlink" title="HashMap 的长度为什么是2的幂次方？"></a>HashMap 的长度为什么是2的幂次方？</h4><p>如果直接通过hash值来决定元素的存放位置，hash值的范围大约在-21亿到21亿之间，虽然发生碰撞的几率很小，但是40亿长度的数组，内存是放不下的。所以做了对数组长度的取模运算，得到的余数来作为元素的存放位置。在取余操作时，如果除数是2的幂次，则等于其与其除数减一的&amp;操作，所以hash%n=（n-1）&amp;hash 的前提是n需要是2的n次方，采用&amp;运算要比%运算效率高，所以HashMap的长度是2的幂次方。</p><h4 id="HashMap-线程安全么？"><a href="#HashMap-线程安全么？" class="headerlink" title="HashMap 线程安全么？"></a>HashMap 线程安全么？</h4><p>HashMap的线程是不安全的。</p><ul><li>可以使用Conllections.synchronizedMap(hashMap)的方式，来返回一个线程安全的Map。</li><li>也可以使用HashTable，它是线程安全的。</li><li>推荐的是直接使用ConcurrentHashMap来避免线程不安全的问题。</li></ul><h4 id="ConcurrentHashMap-和-Hashtable-的区别？"><a href="#ConcurrentHashMap-和-Hashtable-的区别？" class="headerlink" title="ConcurrentHashMap 和 Hashtable 的区别？"></a>ConcurrentHashMap 和 Hashtable 的区别？</h4><ol><li>底层结构上不同：ConcurrentHashMap跟HashMap一样，在1.8之前，是 <strong>分段的数组+链表</strong> 的形式，在1.8之后，是 <strong>分段的数组+链表+红黑树</strong> 的形式。而HashTable是 <strong>数组+链表</strong> 的形式。</li><li>实现线程安全的方式不同：ConcurrentHashMap在JDK1.7的时候，使用的分段锁SegMent，将整个桶的数据进行分段，每段数据都有各自的锁来控制并发访问。在JDK1.8之后，摒弃了分段锁，而是直接用<strong>Node数组+链表+红黑树</strong>的数据结构来实现，并发控制使用<strong>synchronized</strong>和<strong>CAS</strong>来操作。而HashTable使用的同一把锁，串行执行，当多线程操作同一个HashTable时，会出现阻塞轮休等待的情况，效率比较低。</li></ol><h4 id="说一下-HashSet-的实现原理？"><a href="#说一下-HashSet-的实现原理？" class="headerlink" title="说一下 HashSet 的实现原理？"></a>说一下 HashSet 的实现原理？</h4><p>HashSet的底层是基于HashMap实现的，HashSet会将加入的对象作为key放到一个HashMap中，HashMap的value统一为PRESENT（一个final的Object对象）。</p><p>当对象加入HashSet时，HashSet会先计算对象的hashcode值来判断元素添加的位置，同时也会有其他加入的对象的hashcode值进行比较，如果hashcode值相同，会调用对象的equal()方法进行比较，如果还相同，则不会进行加入操作。</p><h4 id="说一说HashMap和ArrayList的扩容机制？"><a href="#说一说HashMap和ArrayList的扩容机制？" class="headerlink" title="说一说HashMap和ArrayList的扩容机制？"></a>说一说HashMap和ArrayList的扩容机制？</h4><p>HashMap默认大小16，负载因子是0.75，也就是16<em>0.75=12，超过12大小时就会触发扩容，扩容的大小时之前的一倍即 </em> 2。</p><p>ArrayList默认初始大小为10，当添加第11个元素的时候，进行扩容，扩容的大小时之前的1.5倍。</p><p><a href="https://www.cnblogs.com/cai170221/p/13371975.html?utm_source=tuicool" target="_blank" rel="noopener">https://www.cnblogs.com/cai170221/p/13371975.html?utm_source=tuicool</a></p><h4 id="ArrayList-和-LinkedList-的区别是什么？"><a href="#ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="ArrayList 和 LinkedList 的区别是什么？"></a>ArrayList 和 LinkedList 的区别是什么？</h4><ul><li><p>线程不安全：ArrayList和LinkedList都是不同步的，也就是不保证线程安全的。</p></li><li><p>底层数据结构：ArrayList底层数据结构是Object数组（查询快，增删慢），LinkedList底层数据结构是双向链表（查询慢，增删快）。</p></li><li><p>是否支持快速随机访问：ArrayList支持，LinkedList不支持。</p><p>ArrayList实现了RandomAccess接口，该接口没有方法，只是一个标识，标识实现这个接口的类具有随机访问的功能。具体应用可以查看Collections源码中的二分搜索方法。</p><p>对于实现了RandomAccess接口的list，优先使用for循环遍历，其次foreach。没有实现RandomAccess接口的list，优先选择iterator遍历。大size的数据，不要使用普通for循环。</p></li></ul><h4 id="如何实现数组和-List-之间的转换？"><a href="#如何实现数组和-List-之间的转换？" class="headerlink" title="如何实现数组和 List 之间的转换？"></a>如何实现数组和 List 之间的转换？</h4><ul><li>数组转List：调用Arrays的asList方法。</li><li>List转数组：调用ArrayList的toArray方法。</li></ul><h4 id="ArrayList-和-Vector-的区别是什么？"><a href="#ArrayList-和-Vector-的区别是什么？" class="headerlink" title="ArrayList 和 Vector 的区别是什么？"></a>ArrayList 和 Vector 的区别是什么？</h4><p>ArrayList是线程不安全的，Vector是线程安全的，Vector类里面所有的方法都是同步的，多线程的情况下能够保证数据安全，但是同步操作会消耗时间，效率低。所以不涉及多线程，不需要保证线程安全的时候，建议使用更高效的ArrayList。</p><h4 id="Array-和-ArrayList-有何区别？"><a href="#Array-和-ArrayList-有何区别？" class="headerlink" title="Array 和 ArrayList 有何区别？"></a>Array 和 ArrayList 有何区别？</h4><ul><li>Array可以存放基本类型和对象，而ArrayList只能存放对象。</li><li>Array是指定大小的，而ArrayList大小可以动态扩容。</li><li>Array没有ArrayList那么多的功能，比如addAll，removeAll和iterator等。</li></ul><h4 id="迭代器-Iterator-是什么？"><a href="#迭代器-Iterator-是什么？" class="headerlink" title="迭代器 Iterator 是什么？"></a>迭代器 Iterator 是什么？</h4><p>首先说一下迭代器模式，它是 Java 中常用的设计模式之一。用于顺序访问集合对象的元素，无需知道集合对象的底层实现。</p><p>Iterator 是可以遍历集合的对象，为各种容器提供了公共的操作接口，隔离对容器的遍历操作和底层实现，从而解耦。</p><p>缺点是增加新的集合类需要对应增加新的迭代器类，迭代器类与集合类成对增加。</p><h4 id="Iterator-怎么使用？有什么特点？"><a href="#Iterator-怎么使用？有什么特点？" class="headerlink" title="Iterator 怎么使用？有什么特点？"></a>Iterator 怎么使用？有什么特点？</h4><p>通过调用iterator()方法，返回一个iterator对象。该对象常用的方法：</p><ul><li>next()：获取序列中下一个元素。</li><li>hasNext()：检查序列中是否还有元素。</li><li>remove()：将迭代器新返回的元素删除。</li></ul><h4 id="Iterator-和-ListIterator-有什么区别？"><a href="#Iterator-和-ListIterator-有什么区别？" class="headerlink" title="Iterator 和 ListIterator 有什么区别？"></a>Iterator 和 ListIterator 有什么区别？</h4><ul><li>ListIterator实现了Iterator接口，并包含其他的功能。比如：增加元素，替换元素，获取前一个和后一个元素的索引等等。</li><li>Iterator 可以遍历Set和List集合，ListIterator只能遍历List集合。</li><li>Iterator 只能向前遍历，ListIterator可以向前也可以向后遍历。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（二）容器&quot;&gt;&lt;a href=&quot;#Java面试题汇总（二）容器&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（二）容器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13/java面试/Java面试题汇总/&quot;&gt;Java
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（五）Linux</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89Linux/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（五）Linux/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-02T08:33:05.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（五）Linux"><a href="#Java面试题汇总（五）Linux" class="headerlink" title="Java面试题汇总（五）Linux"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（五）Linux</h2><h4 id="常用的查看文件内容命令有哪些？"><a href="#常用的查看文件内容命令有哪些？" class="headerlink" title="常用的查看文件内容命令有哪些？"></a>常用的查看文件内容命令有哪些？</h4><p>tail  cat  more  vi  vim</p><h4 id="怎么查找特定的文件？"><a href="#怎么查找特定的文件？" class="headerlink" title="怎么查找特定的文件？"></a>怎么查找特定的文件？</h4><p>find命令</p><p>语法：find path [options] params</p><p>作用：在指定目录下查找文件</p><p>举例：</p><ul><li>find ~ -name “target.java”    //精确查找文件</li><li>find ~ -name “target*”   //模糊查找文件</li><li>find ~ -iname “target*”   //不区分文件名大小写去查找文件</li></ul><h4 id="检索文件内容？"><a href="#检索文件内容？" class="headerlink" title="检索文件内容？"></a>检索文件内容？</h4><p>grep命令（Global Regular Expression Print）</p><p>语法：grep [options] pattern file</p><p>作用：查找文件里符合条件的字符串</p><p>举例：</p><ul><li>grep ‘test’ target.log   //查找target.log文件里有“test”字符串的行</li><li>grep -o ‘[a-zA-Z0-9-]’   //根据正则表达式进行匹配查找</li><li>grep -v ‘test’  //找到不匹配“test”的行</li></ul><p>grep经常搭配 <strong>管道操作符 |</strong></p><p>作用：可将指令连接起来，前一个指令的输出作为后一个指令的输入</p><p>举例：</p><ul><li>ps -ef | grep tomcat   //查找tomcat进程</li></ul><h4 id="对文件内容做统计？"><a href="#对文件内容做统计？" class="headerlink" title="对文件内容做统计？"></a>对文件内容做统计？</h4><p>awk命令</p><p>语法：awk [options] ‘cmd’ file</p><p>作用：</p><ul><li>一次读取一行文本，对输入分隔符进行切片，切成多个组成部分；</li><li>将切片直接保存在内建的变量中，$1,$2…($0表示行的全部)；</li><li>支持对单个切片的判断，支持循环判断，默认分隔符为空格；</li></ul><p>举例：</p><ul><li>awk ‘{print $1,$4}’ netstat.txt   //默认以空格为分隔符对每行数据切片后，输出第1和第4列数据</li><li>awk -F “,” ‘{print $1,$4}’ netstat.txt   //以”,为分隔符对每行数据切片后，输出第1和第4列数据</li><li>awk ‘$1==”tcp” &amp;&amp; $2==1 {print $0}’ netstat.txt   //输出第1列数据为”tcp“，第2列数据为1的所有行数据</li><li>awk ‘{arr[$1]++}END{for(i in arr)print i “\t” arr[i]}’   //定义了一个名字叫arr的数组，$1中遇到相同项就加一，然后循环输出个数</li></ul><h4 id="批量替换文本内容？"><a href="#批量替换文本内容？" class="headerlink" title="批量替换文本内容？"></a>批量替换文本内容？</h4><p>sed命令（stream editor 流编辑器）</p><p>语法：sed [options] ‘sed command’ filename</p><p>作用：适合用于对文本的行内容进行处理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（五）Linux&quot;&gt;&lt;a href=&quot;#Java面试题汇总（五）Linux&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（五）Linux&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13/java面试/Java面试题
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（十一）SpringMVC</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89SpringMVC/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（十一）SpringMVC/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-02T14:19:50.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（十一）SpringMVC"><a href="#Java面试题汇总（十一）SpringMVC" class="headerlink" title="Java面试题汇总（十一）SpringMVC"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（十一）SpringMVC</h2><h4 id="SpringMVC的工作原理（执行流程）是什么？"><a href="#SpringMVC的工作原理（执行流程）是什么？" class="headerlink" title="SpringMVC的工作原理（执行流程）是什么？"></a>SpringMVC的工作原理（执行流程）是什么？</h4><ol><li>客户端（常见的如浏览器）发送请求，直接请求到前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handler。</li><li>处理器映射器根据请求url找到具体的处理器，生成处理器对象以及处理器拦截器（如果有则生成）一并返回给DispatcherServlet。</li><li>DispatcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter会根据Handler来调用真正的处理器开始处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个ModelAndView对象给DispatcherServlet，Model是返回的数据对象，View是一个逻辑上的View。</li><li>DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析。</li><li>ViewResolver会根据逻辑上的View，查找实际的View。</li><li>DispatcherServlet对View进行渲染视图（将模型数据填充至视图中）。</li><li>将View返回给请求者。</li></ol><h4 id="SpringMVC中如何解决GET-POST请求中文乱码问题？"><a href="#SpringMVC中如何解决GET-POST请求中文乱码问题？" class="headerlink" title="SpringMVC中如何解决GET|POST请求中文乱码问题？"></a>SpringMVC中如何解决GET|POST请求中文乱码问题？</h4><ul><li><p>GET</p><ul><li>每次发送请求之前对URL进行编码：比如encodeURI()方法；</li><li>更简便的方法，在服务器端配置tomcat的server.xml文件，增加URIEncoding=“UTF-8”，然后重启tomcat即可。</li></ul></li><li><p>POST</p><ul><li><p>可以每次在request解析数据时设置编码格式：request.setCharacterEncoding(“utf-8”)；</p></li><li><p>可以使用编码过滤器解决，<strong>最常用的方法</strong>是使用Spring提供的编码过滤器，在web.xml里面添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>charsetFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该过滤器做的其实就是强制为请求和响应设置编码格式：</p><p>request.setCharacterEncoding(“utf-8”);<br>response.setCharacterEncoding(“utf-8”);</p></li></ul></li></ul><h4 id="SpringMVC怎样设定重定向和转发的？"><a href="#SpringMVC怎样设定重定向和转发的？" class="headerlink" title="SpringMVC怎样设定重定向和转发的？"></a>SpringMVC怎样设定重定向和转发的？</h4><p>在返回值前面加上redirect:（重定向）或者forward:（请求转发）。</p><h4 id="SpringMVC如何做异常处理？"><a href="#SpringMVC如何做异常处理？" class="headerlink" title="SpringMVC如何做异常处理？"></a>SpringMVC如何做异常处理？</h4><p>可以将异常抛给Spring框架来处理，自定义实现Spring框架的全局异常解析器<strong>HandlerExceptionResolver</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（十一）SpringMVC&quot;&gt;&lt;a href=&quot;#Java面试题汇总（十一）SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（十一）SpringMVC&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（十）Spring</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%8D%81%EF%BC%89Spring/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（十）Spring/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-03T02:44:17.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（十）Spring"><a href="#Java面试题汇总（十）Spring" class="headerlink" title="Java面试题汇总（十）Spring"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（十）Spring</h2><h4 id="什么是Spring？"><a href="#什么是Spring？" class="headerlink" title="什么是Spring？"></a>什么是Spring？</h4><h4 id="列举一些重要的Spring模块？"><a href="#列举一些重要的Spring模块？" class="headerlink" title="列举一些重要的Spring模块？"></a>列举一些重要的Spring模块？</h4><ul><li>Spring Core：Spring框架的基础，可以说Spring其他的所有功能都需要依赖于该类库。主要提供IOC依赖注入功能。</li><li>Spring Aspects：该模块为与Aspects的集成提供支持。</li><li>Spring AOP：提供了面向切面的编程实现。</li><li>Spring JDBC：Java数据库连接。</li><li>Spring JMS：Java消息服务。</li><li>Spring ORM：用于支持Hibernate等ORM工具。</li><li>Spring Web：为创建Web应用程序提供支持。</li><li>Spring Test：提供了对Junit和TestNG测试的支持。</li></ul><h4 id="Controller-vs-RestController-？"><a href="#Controller-vs-RestController-？" class="headerlink" title="@Controller vs @RestController ？"></a>@Controller vs @RestController ？</h4><ul><li>@Controller返回的是一个页面，配合@ResponseBody注解返回对象数据。一般前后端不分离的项目使用居多。</li><li>@RestController返回的Json或者Xml形式数据，相当于@Controller+@ResponseBody的组合，对象数据直接以Json或者Xml形式写入到HTTP响应（Response）中，RESTFul风格的web服务，应用于前后端分离的情况。</li></ul><p>@RestController是在Spring 4之后新加的注解。</p><p>@ResponseBody注解的作用是将Controller的方法返回的对象通过适当的转换器转换成指定的格式后，写入到HTTP响应（Response）对象的body中，通常返回Json格式居多。</p><h4 id="谈谈对IOC和AOP的理解？"><a href="#谈谈对IOC和AOP的理解？" class="headerlink" title="谈谈对IOC和AOP的理解？"></a>谈谈对IOC和AOP的理解？</h4><h4 id="Spring中bean的作用域有哪些？"><a href="#Spring中bean的作用域有哪些？" class="headerlink" title="Spring中bean的作用域有哪些？"></a>Spring中bean的作用域有哪些？</h4><ul><li>singleton：唯一bean模式，Spring中的bean默认都是单例的。</li><li>prototype：针对每个getBean请求都会创建一个新的bean实例。</li><li>request：每一次HTTP请求都会创建一个新的bean实例，该bean仅在当前HTTP Request内有效。</li><li>session：会为每个session创建一个bean实例，该bean仅在当前HTTP Session内有效。</li><li>global-session：会为每个全局Http session创建一个bean实例，该作用域仅对基于Portlet的web应用有意义，不过Portlet在Spring5已经没有了。</li></ul><h4 id="Spring中的单例bean的线程安全吗？"><a href="#Spring中的单例bean的线程安全吗？" class="headerlink" title="Spring中的单例bean的线程安全吗？"></a>Spring中的单例bean的线程安全吗？</h4><p>不安全，大部分时候我们并没有在系统中使用多线程，所以很少有⼈会关注这个问题。单例 bean 存在线程问题，主要是因为当多个线程操作同⼀个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。</p><p>常见的方法有两种：</p><ol><li>在Bean对象中尽量不使用可变的成员变量（不太现实）。</li><li>在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal中（推荐的一种方式）。</li></ol><h4 id="Component-和-Bean-的区别是什么？"><a href="#Component-和-Bean-的区别是什么？" class="headerlink" title="@Component 和 @Bean 的区别是什么？"></a>@Component 和 @Bean 的区别是什么？</h4><ol><li>作用的对象不同。@Component注解作用于类，而@Bean注解作用于方法。</li><li>@Component通常是通过类路径来自动侦测以及自动装配到Spring容器中（可以通过@ComponentScan注解定义要扫描的路径从中找出标识了需要装配的类自动装配到Spring容器中，SpringBoot项目启动类的@SpringBootApplication注解已经包含了@ComponentScan注解）。@Bean注解通常是我们在标有该注解的方法中定义产生这个Bean。</li><li>@Bean注解比@Component注解的自定义性更强。而且很多地方只能通过@Bean注解来注册Bean，比如当我们引用第三方类库的类需要装配到Spring容器中时，就只能通过@Bean来实现。</li></ol><h4 id="将⼀个类声明为Spring的-bean-的注解有哪些？"><a href="#将⼀个类声明为Spring的-bean-的注解有哪些？" class="headerlink" title="将⼀个类声明为Spring的 bean 的注解有哪些？"></a>将⼀个类声明为Spring的 bean 的注解有哪些？</h4><ul><li>@Component：通用的注解，可标注任意类为Spring组件，如果一个bean不知道用于哪一层，可以使用@Component注解标注；</li><li>@Repository：对应持久层即Dao层，主要用于数据库相关操作；</li><li>@Service：对应服务层，主要处理一些复杂的业务逻辑，需要用到Dao层；</li><li>@Controller：对应Spring MVC的控制层，主要接收用户的请求并调用Service层处理后返回结果。</li></ul><h4 id="Spring中Bean的声明周期？"><a href="#Spring中Bean的声明周期？" class="headerlink" title="Spring中Bean的声明周期？"></a>Spring中Bean的声明周期？</h4><h4 id="Spring中都用到了哪些设计模式？"><a href="#Spring中都用到了哪些设计模式？" class="headerlink" title="Spring中都用到了哪些设计模式？"></a>Spring中都用到了哪些设计模式？</h4><ul><li>工厂模式：Spring使用工厂模式通过BeanFactory、ApplicationContext来创建Bean对象；</li><li>单例模式：Spring中的Bean默认就是单例的；</li><li>代理模式：Spring的AOP功能实现；</li><li>包装器模式：</li><li>观察者模式：</li><li>适配器模式：</li></ul><h4 id="Spring管理事务的方式有哪几种？"><a href="#Spring管理事务的方式有哪几种？" class="headerlink" title="Spring管理事务的方式有哪几种？"></a>Spring管理事务的方式有哪几种？</h4><ol><li>编程式事务，在代码中硬编码。（不推荐使用）</li><li>声明式事务，在配置文件中配置。（推荐使用）<ul><li>基于XML的声明式事务</li><li>基于注解的声明式事务</li></ul></li></ol><h4 id="Spring-事务中的隔离级别有哪几种？"><a href="#Spring-事务中的隔离级别有哪几种？" class="headerlink" title="Spring 事务中的隔离级别有哪几种？"></a>Spring 事务中的隔离级别有哪几种？</h4><h4 id="Spring-事务中哪几种事务传播行为？"><a href="#Spring-事务中哪几种事务传播行为？" class="headerlink" title="Spring 事务中哪几种事务传播行为？"></a>Spring 事务中哪几种事务传播行为？</h4><h4 id="Transactional-rollbackFor-Exception-class-注解了解吗？"><a href="#Transactional-rollbackFor-Exception-class-注解了解吗？" class="headerlink" title="@Transactional(rollbackFor = Exception.class)注解了解吗？"></a>@Transactional(rollbackFor = Exception.class)注解了解吗？</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（十）Spring&quot;&gt;&lt;a href=&quot;#Java面试题汇总（十）Spring&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（十）Spring&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13/java面试/Java
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总（四）Redis</title>
    <link href="http://yoursite.com/2019/03/13/java%E9%9D%A2%E8%AF%95/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89Redis/"/>
    <id>http://yoursite.com/2019/03/13/java面试/Java面试题（四）Redis/</id>
    <published>2019-03-13T03:43:51.000Z</published>
    <updated>2020-12-02T08:33:05.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面试题汇总（四）Redis"><a href="#Java面试题汇总（四）Redis" class="headerlink" title="Java面试题汇总（四）Redis"></a><a href="/2019/03/13/java面试/Java面试题汇总/">Java面试题汇总</a>（四）Redis</h2><h4 id="Redis和Memecache有什么区别？"><a href="#Redis和Memecache有什么区别？" class="headerlink" title="Redis和Memecache有什么区别？"></a>Redis和Memecache有什么区别？</h4><p>Redis支持</p><h4 id="为什么Redis能这么快？"><a href="#为什么Redis能这么快？" class="headerlink" title="为什么Redis能这么快？"></a>为什么Redis能这么快？</h4><h4 id="Redis的使用场景都有哪些？"><a href="#Redis的使用场景都有哪些？" class="headerlink" title="Redis的使用场景都有哪些？"></a>Redis的使用场景都有哪些？</h4><ol><li>缓存</li><li>计数器</li><li>排行榜，去top n个数据</li><li>pub、sub发布订阅构建实时消息系统</li><li>构建消息队列</li><li>精确的设置过期时间</li><li>各数据类型的应用场景：<ul><li>String：缓存、限流、计数器、分布式锁、分布式Session</li><li>Hash：存储用户信息、用户主页访问量、组合查询</li><li>List：微博关注人时间轴列表、简单队列</li><li>Set：赞、踩、标签、好友关系</li><li>Zset：排行榜</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java面试题汇总（四）Redis&quot;&gt;&lt;a href=&quot;#Java面试题汇总（四）Redis&quot; class=&quot;headerlink&quot; title=&quot;Java面试题汇总（四）Redis&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/2019/03/13/java面试/Java面试题
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>快进来看看</title>
    <link href="http://yoursite.com/2019/02/18/work4j/"/>
    <id>http://yoursite.com/2019/02/18/work4j/</id>
    <published>2019-02-18T12:47:27.752Z</published>
    <updated>2019-02-18T12:47:27.753Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客~<br>Work For Java~</p><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>本人帅气java开发工程师一只，关于博客，自己在博客园、csdn等都注册有账号，但是一直想自己写一个博客程序，因为感觉这样比较骚气。鼓捣了很多次，受限于很多原因，比如木有money去买云服务器、对于博客的设计要求高、工作忙、生活忙等等（其实就是懒），最终不了了之。</p><p>网上冲浪的时候，经常浏览一些他人的个人博客，看一些技术类的文章，偶然一个机会看到一篇博客的评论里有人问到博主：“请问博主这个网站使用什么框架开发的，我也想学下，谢谢！”，在博主的回复里，得知了hexo。然后百度了后发现了新大陆，原来辣么多的个人博客是这样来的。当天就搭建起了这个博客，主题选了见过很多次的next。下面是链接：</p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">HEXO博客框架</a></p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NEXT主题</a></p><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p>博客的内容三大部分：</p><ul><li>java技术栈（java涉及的知识点）</li><li>项目实战（框架应用的实战，就从“work4j社区”项目开始吧，比较实用，希望后面会有人使用）</li><li>生活杂谈（更多是搞笑的，正能量的文章，不涉及个人感情的东西，因为我有很多小秘密，不能告诉你~=。=）</li></ul><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>每个人都有工作，生活中还有许多琐事，但是自己该总结的还是要总结。技术是不断改进的，自己的知识储备不更新，不积累，不与时俱进，那。那。。那。。。就太可怕了~</p><p>6:00-7:00——博客时间</p><p>19:00-20:30——coding时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的博客~&lt;br&gt;Work For Java~&lt;/p&gt;
&lt;h1 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h1&gt;&lt;p&gt;本人帅气java开发工程师一只，关于博客，自己在博客园、csdn等都注
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客的搭建与维护</title>
    <link href="http://yoursite.com/2018/09/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/index/"/>
    <id>http://yoursite.com/2018/09/03/博客搭建/index/</id>
    <published>2018-09-03T07:53:44.000Z</published>
    <updated>2019-02-18T12:47:27.756Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器，所以写博客之前，先要熟悉下写博客中间常用的一些配置、语法和命令。其实就是我自己老是记不住（=。=），好记性不如烂笔头，所以还是老老实实记下来吧。既然是关于博客的，那索性就把博客搭建的过程也记下来，方便各位有兴趣的也能搭建一个自己的博客。</p><h1 id="Hexo博客的搭建"><a href="#Hexo博客的搭建" class="headerlink" title="Hexo博客的搭建"></a>Hexo博客的搭建</h1><p>Hexo官方网站上也有文档，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档地址</a>，可以去了解下。下面是具体的搭建过程，按照这个下来，保证能搭建成功。</p><p>真不成功的话，那就忽略上面说的话。（是不是很严谨，=。=）</p><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>Hexo是基于nodeJS环境的静态博客，官方要求，所以老老实实的安装了吧，我的电脑系统是windows的，所以下面是windows的安装说明：</p><ul><li>node.js下载地址</li><li>下载好msi文件后，双击打开安装，一路next，不过在Custom Setup这一步记得选<code>Add to PATH,</code>这样你就不用自己去配置电脑上环境变量了。 </li><li>装完后按 <code>win + r</code> 快捷键调出【运行】，然后输入cmd后点确定，在cmd中输入查看版本命令：node -v</li></ul><p>能够查看到node版本后就算安装成功了。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h1 id="发布博客的常用配置"><a href="#发布博客的常用配置" class="headerlink" title="发布博客的常用配置"></a>发布博客的常用配置</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h2 id="博客里添加本地图片"><a href="#博客里添加本地图片" class="headerlink" title="博客里添加本地图片"></a>博客里添加本地图片</h2><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h1 id="把本地博客文档上传至github"><a href="#把本地博客文档上传至github" class="headerlink" title="把本地博客文档上传至github"></a>把本地博客文档上传至github</h1><h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工欲善其事，必先利其器，所以写博客之前，先要熟悉下写博客中间常用的一些配置、语法和命令。其实就是我自己老是记不住（=。=），好记性不如烂笔头，所以还是老老实实记下来吧。既然是关于博客的，那索性就把博客搭建的过程也记下来，方便各位有兴趣的也能搭建一个自己的博客。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>equals()和hashCode()的区别</title>
    <link href="http://yoursite.com/2018/06/20/java%E6%8A%80%E6%9C%AF%E6%A0%88/equals%E5%92%8ChashCode/"/>
    <id>http://yoursite.com/2018/06/20/java技术栈/equals和hashCode/</id>
    <published>2018-06-20T05:59:19.000Z</published>
    <updated>2019-02-18T12:47:27.720Z</updated>
    
    <content type="html"><![CDATA[<p>equals()和hashCode()的区别</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;equals()和hashCode()的区别&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="技术栈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>equals()和==的区别</title>
    <link href="http://yoursite.com/2018/06/20/java%E6%8A%80%E6%9C%AF%E6%A0%88/equals%E5%92%8C%E7%AD%89%E7%AD%89/"/>
    <id>http://yoursite.com/2018/06/20/java技术栈/equals和等等/</id>
    <published>2018-06-20T05:59:19.000Z</published>
    <updated>2019-02-18T12:47:27.724Z</updated>
    
    <content type="html"><![CDATA[<p>equals()和==的区别</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;equals()和==的区别&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="技术栈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java技术栈</title>
    <link href="http://yoursite.com/2018/06/14/java%E6%8A%80%E6%9C%AF%E6%A0%88/java%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>http://yoursite.com/2018/06/14/java技术栈/java技术栈/</id>
    <published>2018-06-14T05:59:19.000Z</published>
    <updated>2019-02-18T12:47:27.727Z</updated>
    
    <content type="html"><![CDATA[<p>一直在纠结怎样去系统的整理一下java知识。百度了一堆，偶然发现一个词——”技术栈“。然后就开始纠结，哪个java技术栈整理的流行且全面。感觉再这样纠结下去，time flies~，还是赶紧动起来，一点一滴的积累，沉淀。</p><h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="https://work4j.github.io/2018/06/14/java%E6%8A%80%E6%9C%AF%E6%A0%88/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/" target="_blank" rel="noopener">字符串常量池</a></li><li>equals()和==的区别</li><li>equals()和hashCode()的区别</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直在纠结怎样去系统的整理一下java知识。百度了一堆，偶然发现一个词——”技术栈“。然后就开始纠结，哪个java技术栈整理的流行且全面。感觉再这样纠结下去，time flies~，还是赶紧动起来，一点一滴的积累，沉淀。&lt;/p&gt;
&lt;h1 id=&quot;java基础&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="技术栈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>字符串常量池</title>
    <link href="http://yoursite.com/2018/06/14/java%E6%8A%80%E6%9C%AF%E6%A0%88/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    <id>http://yoursite.com/2018/06/14/java技术栈/字符串常量池/</id>
    <published>2018-06-14T05:59:19.000Z</published>
    <updated>2019-02-18T12:47:27.729Z</updated>
    
    <content type="html"><![CDATA[<p>字符串问题在面试过程中经常被问到，当然也算是日常coding中非常常用的了，下面分析一波字符串常量池。</p><p>JVM为了减少字符串对象的重复创建，其维护了一个特殊的内存，这段内存被称为字符串常量池。</p><p>java中字符串对象创建有两种形式：</p><p>一种为字面量形式，如String str=” wsp”；</p><p>另一种就是使用标准的构造对象的方法，如String str=new String（”wsp”）；</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>当代码中出现字面量形式创建字符串对象时，JVM就会首先对这个字面量进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回，否则新的字符串对象就被创建，然后将这个引用放入字符串常量池中，并返回该引用。</p><p>String str1=”wan”;</p><p>JVM检测这个字面量，这里我们认为没有内容为“wan”的对象存在。JVM通过字符串常量池查找不到内容为”wan”的字符串对象存在，那么会创建这个字符串对象，然后将刚创建的对象的引用放入到字符串常量池中，并且将引用返回给变量str1。</p><p>String str2=”wan”;</p><p>同样JVM还是要检测这个字面量，JVM通过查找字符串常量池，发现内容为”wan”字符串对象存在，于是将已经存在的字符串对象的引用返回给变量str2。注意这里不会重新创建新的字符串对象。</p><p>验证是否为str1和str2是否指向同一对象，我们可以通过这段代码</p><p>System.out.println(str1 == str2);</p><p>结果为true。</p><p>String str3 = new String(“wan”)</p><p>当我们使用了new来构造字符串对象的时候，不管字符串常量池中有没有相同内容的对象的引用，新的字符串对象都会创建。因此我们使用下面代码测试一下，</p><p>String str3 = new String(“wan”);<br>System.out.println(str1 == str3);</p><p>结果如我们所想，为false，表明这两个变量指向的为不同的对象。</p><p><strong>intern</strong></p><p>对于上面使用new创建的字符串对象，如果想将这个对象的引用加入到字符串常量池，可以使用intern方法。</p><p>调用intern后，首先检查字符串常量池中是否有该对象的引用，如果存在，则将这个引用返回给变量，否则将引用加入并返回给变量。</p><p>String str4 = str3.intern();</p><p>System.out.println(str4 == str1);</p><p>输出的结果为true。</p><p><strong>前提条件？</strong></p><p>字符串常量池实现的前提条件就是Java中String对象是不可变的，这样可以安全保证多个变量共享同一个对象。如果Java中的String对象可变的话，一个引用操作改变了对象的值，那么其他的变量也会受到影响，显然这样是不合理的。</p><p><strong>引用 or 对象</strong></p><p>字符串常量池中存放的时引用还是对象，这个问题是最常见的。字符串常量池存放的是对象引用，不是对象。在Java中，对象都创建在堆内存中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字符串问题在面试过程中经常被问到，当然也算是日常coding中非常常用的了，下面分析一波字符串常量池。&lt;/p&gt;
&lt;p&gt;JVM为了减少字符串对象的重复创建，其维护了一个特殊的内存，这段内存被称为字符串常量池。&lt;/p&gt;
&lt;p&gt;java中字符串对象创建有两种形式：&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="技术栈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>springboot目录</title>
    <link href="http://yoursite.com/2018/06/14/springboot/springboot%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2018/06/14/springboot/springboot目录/</id>
    <published>2018-06-14T05:59:19.000Z</published>
    <updated>2019-02-18T12:47:27.749Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>work4j社区项目破蛋~</title>
    <link href="http://yoursite.com/2018/06/14/work4j/%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2018/06/14/work4j/目录/</id>
    <published>2018-06-14T05:59:19.000Z</published>
    <updated>2020-07-02T15:18:38.007Z</updated>
    
    <content type="html"><![CDATA[<p>下面介绍下，work4j社区项目如何快速的破蛋而出。</p><h1 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h1><p>如何快速呢，嗯……一切从简就能快速啦，所以功能咱就设计的简单点，但是该有的还是要有的。</p><ul><li><p><strong>用户</strong></p><p>用户的介绍就省略了吧，略略略~~</p></li><li><p><strong>帖子</strong></p><p>帖子的介绍也省略了吧，略略略~~</p></li><li><p><strong>栏目</strong></p><p>帖子属于哪个栏目（java，springBoot，技术交流、资源分享、吐槽灌水等等），略略略~~</p></li><li><p><strong>回复</strong></p><p>没有回复就没有互动，没有互动就没有emm…，略略略~~</p></li><li><p><strong>收藏</strong></p><p>好帖子当然要收藏啦，不小心点错了必须要取消收藏=。=</p></li><li><p><strong>关注</strong></p><p>喜欢他她它，就要关注他她它。</p></li><li><p><strong>附件</strong></p><p>上传的图片、附件统一管理。</p></li></ul><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><ul><li><p><strong>用户</strong></p><p>| 字段 | 类型 | 名称 | 备注 |<br>| :–: | :–: | :–: | :–: |<br>|  1   |  2   |  3   |  4   |<br>|  5   |  6   |  7   |  8   |<br>|  9   |      |  -3  | =11  |</p></li></ul><ul><li><strong>帖子</strong></li></ul><ul><li><strong>栏目</strong></li></ul><ul><li><strong>回复</strong></li></ul><ul><li><strong>收藏</strong></li></ul><ul><li><strong>关注</strong></li></ul><ul><li><strong>附件</strong></li></ul><h1 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h1><p>可以看出，初期社区的功能相当简单了。让思路比较清晰些，采用前后端分离的方案。</p><p>后端框架：springboot（快速开发）</p><p>前端框架：vue、angularjs、react等这些前端框架，我通通不会=。=，那就老老实实的写原生的吧。mvvm框架不懂，但是UI框架还是需要的，毕竟 I just java开发，UI框架的话，推荐 Layui <a href="https://www.layui.com/" target="_blank" rel="noopener">传送门</a>，Layui也有相应的社区模板 <a href="https://www.layui.com/template/fly/" target="_blank" rel="noopener">传送门</a>，真是棒棒哒。</p><p>数据库：mysql</p><h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><p>你还在为写大量的重复增删改查代码而烦恼吗，使用代码生成器吧，像mybatis有自己的Generator自动生成Dao、Model、Mapping相关文件，咱们这里更高级一些，除了这些，把其他代码也一并生成。这里介绍使用rapid-generator。</p><h1 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h1><ul><li><p><strong>登录</strong></p><p>用户的介绍就省略了吧，略略略~~</p></li><li><p><strong>文件上传/下载</strong></p><p>帖子的介绍也省略了吧，略略略~~</p></li><li><p><strong>工具类</strong></p><p>帖子属于哪个栏目（java，springBoot，技术交流、资源分享、吐槽灌水等等），略略略~~</p></li></ul><h1 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h1><h1 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h1><h1 id="work4j社区项目进化"><a href="#work4j社区项目进化" class="headerlink" title="work4j社区项目进化~"></a>work4j社区项目进化~</h1><h1 id="work4j社区项目超进化"><a href="#work4j社区项目超进化" class="headerlink" title="work4j社区项目超进化~"></a>work4j社区项目超进化~</h1><h1 id="work4j社区项目究极进化"><a href="#work4j社区项目究极进化" class="headerlink" title="work4j社区项目究极进化~"></a>work4j社区项目究极进化~</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面介绍下，work4j社区项目如何快速的破蛋而出。&lt;/p&gt;
&lt;h1 id=&quot;功能设计&quot;&gt;&lt;a href=&quot;#功能设计&quot; class=&quot;headerlink&quot; title=&quot;功能设计&quot;&gt;&lt;/a&gt;功能设计&lt;/h1&gt;&lt;p&gt;如何快速呢，嗯……一切从简就能快速啦，所以功能咱就设计的
      
    
    </summary>
    
    
      <category term="work4j社区" scheme="http://yoursite.com/tags/work4j%E7%A4%BE%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>swagger2常用注解</title>
    <link href="http://yoursite.com/2018/06/14/swagger2/"/>
    <id>http://yoursite.com/2018/06/14/swagger2/</id>
    <published>2018-06-14T02:00:00.000Z</published>
    <updated>2019-02-18T12:47:27.751Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>：用在请求的类上，表示对类的说明</span><br><span class="line">    tags=<span class="string">"说明该类的作用，可以在UI界面上看到的注解"</span></span><br><span class="line">    value=<span class="string">"该参数没什么意义，在UI界面上也看到，所以不需要配置"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用</span><br><span class="line">    value=<span class="string">"说明方法的用途、作用"</span></span><br><span class="line">    notes=<span class="string">"方法的备注说明"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>：用在<span class="meta">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面</span><br><span class="line">        name：参数名</span><br><span class="line">        value：参数的汉字说明、解释</span><br><span class="line">        required：参数是否必须传</span><br><span class="line">        paramType：参数放在哪个地方</span><br><span class="line">            · header --&gt; 请求参数的获取：<span class="meta">@RequestHeader</span></span><br><span class="line">            · query --&gt; 请求参数的获取：<span class="meta">@RequestParam</span></span><br><span class="line">            · path（用于restful接口）--&gt; 请求参数的获取：<span class="meta">@PathVariable</span></span><br><span class="line">            · body（不常用）</span><br><span class="line">            · form（不常用）    </span><br><span class="line">        dataType：参数类型，默认String，其它值dataType=<span class="string">"Integer"</span>       </span><br><span class="line">        defaultValue：参数的默认值</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiResponses</span>：用在请求的方法上，表示一组响应</span><br><span class="line">    <span class="meta">@ApiResponse</span>：用在<span class="meta">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br><span class="line">        code：数字，例如<span class="number">400</span></span><br><span class="line">        message：信息，例如<span class="string">"请求参数没填好"</span></span><br><span class="line">        response：抛出异常的类</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息</span><br><span class="line">            （这种一般用在post创建的时候，使用<span class="meta">@RequestBody</span>这样的场景，</span><br><span class="line">            请求参数无法使用<span class="meta">@ApiImplicitParam</span>注解进行描述的时候）</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>：用在属性上，描述响应类的属性</span><br></pre></td></tr></table></figure><h2 id="1、-Api：用在请求的类上，说明该类的作用"><a href="#1、-Api：用在请求的类上，说明该类的作用" class="headerlink" title="1、@Api：用在请求的类上，说明该类的作用"></a>1、@Api：用在请求的类上，说明该类的作用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>：用在请求的类上，说明该类的作用</span><br><span class="line">    tags=<span class="string">"说明该类的作用"</span></span><br><span class="line">    value=<span class="string">"该参数没什么意义，所以不需要配置"</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags=<span class="string">"APP用户注册Controller"</span>)</span><br></pre></td></tr></table></figure><h2 id="2、-ApiOperation：用在请求的方法上，说明方法的作用"><a href="#2、-ApiOperation：用在请求的方法上，说明方法的作用" class="headerlink" title="2、@ApiOperation：用在请求的方法上，说明方法的作用"></a>2、@ApiOperation：用在请求的方法上，说明方法的作用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>：<span class="string">"用在请求的方法上，说明方法的作用"</span></span><br><span class="line">    value=<span class="string">"说明方法的作用"</span></span><br><span class="line">    notes=<span class="string">"方法的备注说明"</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"用户注册"</span>,notes=<span class="string">"手机号、密码都是必输项，年龄随边填，但必须是数字"</span>)</span><br></pre></td></tr></table></figure><h2 id="3、-ApiImplicitParams：用在请求的方法上，包含一组参数说明"><a href="#3、-ApiImplicitParams：用在请求的方法上，包含一组参数说明" class="headerlink" title="3、@ApiImplicitParams：用在请求的方法上，包含一组参数说明"></a>3、@ApiImplicitParams：用在请求的方法上，包含一组参数说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams</span>：用在请求的方法上，包含一组参数说明</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>：用在 <span class="meta">@ApiImplicitParams</span> 注解中，指定一个请求参数的配置信息       </span><br><span class="line">        name：参数名</span><br><span class="line">        value：参数的汉字说明、解释</span><br><span class="line">        required：参数是否必须传</span><br><span class="line">        paramType：参数放在哪个地方</span><br><span class="line">            · header --&gt; 请求参数的获取：<span class="meta">@RequestHeader</span></span><br><span class="line">            · query --&gt; 请求参数的获取：<span class="meta">@RequestParam</span></span><br><span class="line">            · path（用于restful接口）--&gt; 请求参数的获取：<span class="meta">@PathVariable</span></span><br><span class="line">            · body（不常用）</span><br><span class="line">            · form（不常用）    </span><br><span class="line">        dataType：参数类型，默认String，其它值dataType=<span class="string">"Integer"</span>       </span><br><span class="line">        defaultValue：参数的默认值</span><br></pre></td></tr></table></figure><p>示列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"mobile"</span>,value=<span class="string">"手机号"</span>,required=<span class="keyword">true</span>,paramType=<span class="string">"form"</span>),</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"password"</span>,value=<span class="string">"密码"</span>,required=<span class="keyword">true</span>,paramType=<span class="string">"form"</span>),</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"age"</span>,value=<span class="string">"年龄"</span>,required=<span class="keyword">true</span>,paramType=<span class="string">"form"</span>,dataType=<span class="string">"Integer"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4、-ApiResponses：用于请求的方法上，表示一组响应"><a href="#4、-ApiResponses：用于请求的方法上，表示一组响应" class="headerlink" title="4、@ApiResponses：用于请求的方法上，表示一组响应"></a>4、@ApiResponses：用于请求的方法上，表示一组响应</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>：用于请求的方法上，表示一组响应</span><br><span class="line">    <span class="meta">@ApiResponse</span>：用在<span class="meta">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br><span class="line">        code：数字，例如<span class="number">400</span></span><br><span class="line">        message：信息，例如<span class="string">"请求参数没填好"</span></span><br><span class="line">        response：抛出异常的类</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"select1请求"</span>,notes = <span class="string">"多个参数，多种的查询参数类型"</span>)</span><br><span class="line"><span class="meta">@ApiResponses</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code=<span class="number">400</span>,message=<span class="string">"请求参数没填好"</span>),</span><br><span class="line">    <span class="meta">@ApiResponse</span>(code=<span class="number">404</span>,message=<span class="string">"请求路径没有或页面跳转路径不对"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5、-ApiModel：用于响应类上，表示一个返回响应数据的信息"><a href="#5、-ApiModel：用于响应类上，表示一个返回响应数据的信息" class="headerlink" title="5、@ApiModel：用于响应类上，表示一个返回响应数据的信息"></a>5、@ApiModel：用于响应类上，表示一个返回响应数据的信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息</span><br><span class="line">            （这种一般用在post创建的时候，使用<span class="meta">@RequestBody</span>这样的场景，</span><br><span class="line">            请求参数无法使用<span class="meta">@ApiImplicitParam</span>注解进行描述的时候）</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>：用在属性上，描述响应类的属性</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span>(description= <span class="string">"返回响应数据"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestMessage</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"是否成功"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success=<span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"返回对象"</span>)</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"错误编号"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"错误信息"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* getter/setter */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="开源框架" scheme="http://yoursite.com/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="swagger" scheme="http://yoursite.com/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>idea使用手册</title>
    <link href="http://yoursite.com/2018/06/12/idea%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/06/12/idea使用/</id>
    <published>2018-06-12T02:00:00.000Z</published>
    <updated>2019-02-18T12:47:27.718Z</updated>
    
    <content type="html"><![CDATA[<p>使用idea已经有很长一段时间了，下面记录一下常用的配置吧~</p><h1 id="设置篇"><a href="#设置篇" class="headerlink" title="设置篇"></a>设置篇</h1><ul><li><h2 id="更改IntelliJ-IDEA生成的注释的user的默认值"><a href="#更改IntelliJ-IDEA生成的注释的user的默认值" class="headerlink" title="更改IntelliJ IDEA生成的注释的user的默认值"></a>更改IntelliJ IDEA生成的注释的user的默认值</h2></li></ul><p>1、file –&gt;  settings –&gt; File and Code Templates<br>2、中间的，选择 includes ，选中File Header。<br>3、右侧会出现 Created by ${USER} on ${DATE}.<br>4、把这个 ${USER} 直接替换掉 Created by myname on ${DATE}.</p><h1 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h1><ul><li><h2 id="lombok插件"><a href="#lombok插件" class="headerlink" title="lombok插件"></a>lombok插件</h2></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用idea已经有很长一段时间了，下面记录一下常用的配置吧~&lt;/p&gt;
&lt;h1 id=&quot;设置篇&quot;&gt;&lt;a href=&quot;#设置篇&quot; class=&quot;headerlink&quot; title=&quot;设置篇&quot;&gt;&lt;/a&gt;设置篇&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;更改IntelliJ-IDE
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="idea" scheme="http://yoursite.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>MQ的基本概念</title>
    <link href="http://yoursite.com/2018/06/12/RabbitMQ/MQ%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2018/06/12/RabbitMQ/MQ的基本概念/</id>
    <published>2018-06-12T02:00:00.000Z</published>
    <updated>2020-07-02T15:11:41.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MQ的基本概念"><a href="#MQ的基本概念" class="headerlink" title="MQ的基本概念"></a>MQ的基本概念</h2><ol><li><p><strong>MQ概述</strong></p><p>MQ全称 Message Queue（消息队列），是在消息的传输过程中保存消息的容器。多用于分布式系统直接进行通信。</p><ul><li>MQ，消息队列，存储消息的中间件</li><li>分布式系统通信两种方式：直接远程调用 和 借助第三方（MQ就是）完成间接通信</li><li>发送方成为生产者，接收方称为消费者</li></ul></li><li><p><strong>MQ的优势和劣势</strong></p><p>优势：</p><ul><li>应用解耦（系统的耦合性越高，容错性就越低，可维护性就越低，<strong>提高系统容错性和可维护性</strong>）</li><li>异步提速（<strong>提升用户体验和系统吞吐量</strong>，即单位时间内处理请求的数目）</li><li>削峰填谷（可以<strong>提高系统稳定性</strong>）</li></ul><p>劣势：</p><ul><li>系统可用性降低</li><li>系统复杂度提高</li><li>一致性问题</li></ul><p>既然MQ有优势也有劣势，那么使用MQ需要满足什么条件呢？</p><p>1. </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MQ的基本概念&quot;&gt;&lt;a href=&quot;#MQ的基本概念&quot; class=&quot;headerlink&quot; title=&quot;MQ的基本概念&quot;&gt;&lt;/a&gt;MQ的基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MQ概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MQ全称 Message
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://yoursite.com/tags/MQ/"/>
    
      <category term="RabbitMQ" scheme="http://yoursite.com/tags/RabbitMQ/"/>
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo安装部署流程</title>
    <link href="http://yoursite.com/2018/06/09/install/"/>
    <id>http://yoursite.com/2018/06/09/install/</id>
    <published>2018-06-09T00:17:05.270Z</published>
    <updated>2018-06-09T00:17:05.270Z</updated>
    
    <content type="html"><![CDATA[<p>安装部署流程~<br>Work For Java~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装部署流程~&lt;br&gt;Work For Java~&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="bbb" scheme="http://yoursite.com/tags/bbb/"/>
    
  </entry>
  
</feed>
