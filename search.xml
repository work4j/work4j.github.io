<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java面试题汇总]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[​ Java面试题汇总，分十九块个模块进行总结，点击标题可以查看答案： 一、Java基础 JDK和JRE有什么区别？ == 和 equals 的区别是什么？ 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？ final 在 java 中有什么作用？ java 中的 Math.round(-1.5) 等于多少？ String 属于基础的数据类型吗？ java 中操作字符串都有哪些类？它们之间有什么区别？ String str=”i”与 String str=new String(“i”)一样吗？ 如何将字符串反转？ String 类的常用方法都有那些？ 抽象类必须要有抽象方法吗？ 普通类和抽象类有哪些区别？ 抽象类能使用 final 修饰吗？ 接口和抽象类有什么区别？ java 中 IO 流分为几种？ BIO、NIO、AIO 有什么区别？ Files的常用方法都有哪些？ 谈谈对java异常机制的理解。 二、容器 java 容器都有哪些？ Collection 和 Collections 有什么区别？ List、Set、Map 之间的区别是什么？ HashMap 和 Hashtable 有什么区别？ 如何决定使用 HashMap 还是 TreeMap？ 说一下 HashMap 的实现原理？ 说一下 HashSet 的实现原理？ ArrayList 和 LinkedList 的区别是什么？ 如何实现数组和 List 之间的转换？ ArrayList 和 Vector 的区别是什么？ Array 和 ArrayList 有何区别？ 在 Queue 中 poll()和 remove()有什么区别？ 哪些集合类是线程安全的？ 迭代器 Iterator 是什么？ Iterator 怎么使用？有什么特点？ Iterator 和 ListIterator 有什么区别？ 三、网络 OSI 的七层模型都有哪些？ 说说TCP的三次握手。 为什么需要三次握手才能建立起连接，两次不行吗，为什么？ 谈谈TCP的四次挥手。 四、Redis Redis和Memecache有什么区别？ 为什么Redis能这么快？ Redis的使用场景都有哪些？ 五、Linux 常用的查看文件内容命令有哪些？ 怎么查找特定的文件？ 怎么对文件内容做统计？ 怎样给文件或目录授权？ 六、多线程 都十分生动 七、JVM 双方都三 八、MySql 地方撒 九、MyBatis 十、Spring 十一、SpringMVC 十二、SpringBoot 十三、SpringCloud 十四、RabbitMQ 十五、设计模式 十六、其他 KafKa Netty 认证授权 数据结构 算法 操作系统]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（一）Java基础]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89Java%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（一）Java基础JDK和JRE有什么区别？ JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。 JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。 其实JDK包含了JRE，同时还包含了编辑java源码的编译器javac，还包含了很多java程序调试和分析的工具，简单来说：如果你需要运行java程序，只需要安装JRE就可以了，如果你还需要编写java程序，需要安装JDK。 == 和 equals 的区别是什么？==对于基本类型比较的是值，对于引用类型比较的是引用（内存地址）。 equals是Object类的一个方法，它里面返回的就是==的判断，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，那它就是比较的内存地址。但是实际应用中，我们往往重写equals方法，来比较两个对象的内容是否相等，比如我们常用的String，Integer等类，它们就重写了equals方法，比较的是对象里的内容。 java.lang.Object类里的equals方法： 123public boolean equals(Object obj) &#123; return (this == obj);&#125; java.lang.String类里的equals方法： 123456789101112131415161718192021public boolean equals(Object anObject) &#123; if (this == anObject) &#123; return true; &#125; if (anObject instanceof String) &#123; String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) &#123; char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) &#123; if (v1[i] != v2[i]) return false; i++; &#125; return true; &#125; &#125; return false;&#125; 总结 ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？错，两个对象的 hashCode()相同， equals()不一定为 true。 ——》单独文章说明。 final 在 java 中有什么作用？ final 修饰的类叫最终类，该类不能被继承； final 修饰的方法不能被重写，但是可以被重载； final 修饰的变量叫常量，常量使用时必须被初始化， 初始化之后就不能被修改。final修饰的变量一些情况下可以先声明后赋值：1.类里面的成员变量可以先声明，在代码块或者构造函数里面赋值，有多个构造函数时，每个构造函数里都需要赋值。2.方法里的变量可以先声明，使用时必须先赋值。 java 中的 Math.round(-1.5) 等于多少？等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。 round() 方法返回一个最接近的 int、long 型值，四舍五入。算法为Math.floor(x+0.5) ，即将原来的数字加上 0.5 后再向下取整，所以 Math.round(11.5) 的结果为 12，Math.round(-11.5) 的结果为 -11，语法格式： 123long round(double d) int round(float f) String 属于基础的数据类型吗？String是引用类型，不属于基础的数据类型。基础数据类型有8种：byte，short，int，long，float，double，char，boolean。 java 中操作字符串都有哪些类？它们之间有什么区别？操作字符串的类有：String、StringBuffer、StringBuilder。 String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。 StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。 String str=”i”与 String str=new String(“i”)一样吗？不一样，因为内存的分配方式不一样。String str=”i”的方式，java虚拟机会将其分配到常量池中；而String str=new String(“i”)则会被分配到堆内存中。 如何将字符串反转？使用 StringBuilder 或者 StringBuffer 类的 reverse() 方法。 String 类的常用方法都有那些？ indexOf()：返回指定字符的索引； charAt()：返回指定索引处的字符； split()：根据指定字符串进行分割字符串，返回一个String数组； substring()：截取字符串； replace()：字符串替换； equals()：字符串比较； trim()：去除字符串两端空白； getBytes()：返回字符串的byte类型数据； length()：返回字符串的长度； toLowerCase()：将字符串转为小写字母； toUpperCase()：将字符串转为大写字母； 抽象类必须要有抽象方法吗？不需要，抽象类不一定非要有抽象方法。 普通类和抽象类有哪些区别？ 普通类不能包含抽象方法，抽象类可以包含抽象方法； 普通类可以直接实例化，抽象类不能直接实例化。 抽象类能使用 final 修饰吗？不能，抽象类就是让其他类继承的，被final修饰的类不能被继承，这样就矛盾了，所以抽象类不能使用final修饰。 接口和抽象类有什么区别？ 实现：接口是被实现的，使用implements来实现接口，而抽象类是被继承的，用extends来继承； 构造函数：接口没有构造函数，抽象类有； 实现数量：类可以实现多个接口，但是只能继承一个抽象类； 访问修饰符：接口中的方法默认使用public修饰；抽象类中的方法可以是任意访问修饰符。 java 中 IO 流分为几种？按功能来分有两种：输入流（input）、输出流（output）。 按类型来分：字节流和字符流。 字节流和字符流的区别是：字节流按8位传输以字节为单位输入输出数据，字符流按16位传输以字符流为单位输入输出数据。 BIO、NIO、AIO 有什么区别？ BIO：Block IO 同步阻塞式IO，平时使用的传统IO，模式简单使用方便，但是并发处理能力低； NIO：New IO 同步非阻塞IO，传统IO的升级，客户端和服务端通过Channel（通道）通讯，实现了多路复用； AIO：Asynchronous IO 是 NIO 的升级，又称为 NIO2，实现了异步非阻塞IO，异步IO的操作基于事件和回调机制。 Files的常用方法都有哪些？java.nio.file.Files： Files.exists()：检测文件是否存在； Files.createFile()：创建文件； FIles.createDirectory()：创建文件夹； Files.delete()：删除文件； Files.copy()：复制文件； Files.move()：移动文件； FIles.size()：查看文件个数； Files.read()：读取文件； FIles.write()：写入文件。]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（三）网络]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（三）网络OSI 的七层模型都有哪些？ 物理层：主要定义了物理设备的标准，如网线的类型、光纤的接口类型、各种传输介质的传输速率等，主要作用是传输比特流，将0101二进制码转换为电流强弱，传输到目的地后再解析为0101的二级制机器码。网卡就是工作在这一层的。 数据链路层：将比特数据转换成了帧，交换机就工作在这一层，对帧解码，并把帧中包含的信息正确的发送到接收方。 网络层：将网络地址翻译成对应的物理地址，并决定数据如何从发送方路由到接收方。路由器、IP协议在这一层。 传输层：解决了主机间的数据传输，传输质量，流量控制，数据分割传输及排序等。TCP、UDP。 会话层：建立和管理应用程序之间的通信，自动收发包和寻址。 表示层：解决不同系统之间通信语法的问题。 应用层：规定了发送方和接收方使用一个固定的消息头等信息，方便接收方解析发送方的数据。HTTP 说说TCP的三次握手？在TCP/IP协议中，TCP协议提供了可靠的连接服务，采用三次握手建立一个连接。 第一次握手：建立连接时，客户端发送SYN包（seq=x）到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务端收到SYN包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（seq=y），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务端的SYN+ACK包，向服务端发送确认包ACK（ack=y+1），此包发送完毕后，客户端和服务端都进入ESTABLISHED状态，完成三次握手。 之所以需要三次握手，一是为了保证双方都能确认自己和对方的发送和接收是正常的，二是为了初始化sequence number的初始值，因为TCP需要根据该值，保证序号不会乱序，能够正确的拼接数据。 首次握手的隐患——SYN超时，服务端收到客户端的SYN包，并发送了SYN+ACK包后没有收到回复，服务端会不断重试直至超时，Linux默认63秒后才断开连接。 同时会有SYN Flood防护机制（SYN Cookie），保活机制（发送保活探测报文）来应对各种情况。 说说TCP的四次挥手？挥手是为了终止连接。 第一次挥手：客户端发送一个FIN，用来关闭客户端到服务端的数据传输，客户端进入FIN_WAIT_1状态； 第二次挥手：服务端能收到FIN后，发送一个ACK给到客户端，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），服务端进入CLOSE_WAIT状态； 第三次挥手：服务端发送一个FIN，用来关闭服务端到客户端的数据传输，服务端进入LAST_ACK状态； 第四次挥手：客户端收到FIN后，客户端进入TIME_WAIT状态，接着发送一个ACK给服务端，确认序号为收到序号+1，服务端进入CLOSED状态，完成四次挥手。 之所以有TIME_WAIT状态，一是为了确保有足够的时间让对方收到ACK包，二是避免新旧连接混淆。 需要四次挥手是因为全双工（通信允许数据在两个方向上同时传输），发送方和接收方都需要FIN报文和ACK报文，所以一方的2次挥手乘以双方，就是四次挥手了。 举个例⼦：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可 能还会有要说的话，A 不能要求 B 跟着⾃⼰的节奏结束通话，于是 B 可能⼜巴拉巴拉说了⼀通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。 TCP和UDP的区别？ TCP面向连接，UDP无连接 TCP可靠，UDP不可靠 TCP有序，UDP无序 TCP所需资源多，传输效率比UDP慢 TCP适合需要可靠传输的场景，比如：文件传输、发送和接收邮件等，UDP适合不需要确认回复的场景，比如即时通信、QQ语音、视频、直播等 TCP协议如何保证可靠传输？ 数据分割传输，每个包进行编号，接收方进行排序。 流量控制：TCP通过滑动窗口实现流量控制，流量控制是为了控制发送方发送速率，保证接收方来得及接收。 阻塞控制：当网络阻塞时，减少数据的发送。 ARQ协议：自动重传请求。基本原理是每发完一个分组就停止发送，等待对方确认，收到确认后再发送下一分组。 超时重传：当TCP发出一个段后，启动一个定时器，等待接收端确认收到这个报文段，如果不能及时的收到一个确认，将会重发这个报文段。 在浏览器中输入url地址 -&gt;&gt; 显示主页的过程？ DNS解析，浏览器查找域名的IP地址（DNS查找过程：浏览器缓存、路由器缓存、DNS缓存） TCP连接 发送HTTP请求 服务器处理请求并返回HTTP报文 浏览器解析渲染页面 连接结束 状态码有哪些？ 1xx：指示信息——表示请求已接收，正在处理 2xx：成功——表示请求正常处理完毕 3xx：重定向——表示需要完成请求必须进行进一步的操作 4xx：客户端错误——表示请求有语法错误或者请求无法实现 5xx：服务器端错误——表示服务器处理请求出错 GET请求和POST请求的区别？ GET请求的信息放在URL（有长度限制），POST放在请求体。 GET符合幂等性和安全性，POST不符合。GET一般是查询获取资源的，不会对数据造成改变，相对安全。而POST会对数据发生改变。 GET可以被缓存（浏览器历史记录）、被存储（浏览器书签），而POST不行。GET请求被缓存，CDN加速，可以缓解服务器压力。 幂等性：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。 ？####]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（二）容器]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%B9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（二）容器java 容器都有哪些？12345678910111213graph TB;Conllection--&gt;ListConllection--&gt;QueueConllection--&gt;SetList--&gt;Vector--&gt;StackList--&gt;ArrayListList--&gt;LinkedListQueue--&gt;LinkedListQueue--&gt;PriorityQueueSet--&gt;HashSet--&gt;LinkedHashSetSet--&gt;TreeSetMap--&gt;HashMapMap--&gt;TreeMap Collection 和 Collections 有什么区别？ java.util.Collection是一个集合接口（集合类的顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List和Set。 Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。 List、Set、Map 之间的区别是什么？ 比较 List Set Map 继承接口 Collection Collection – 常见实现类 ArrayList、LinkedList、Vector HashSet、LinkedHashSet、TreeSet HashMap、HashTable、TreeMap 常见方法 add()、remove()、clear()、get()、contains()、size() add()、remove()、clear()、contains()、size() put()、get()、remove()、clear()、containsKey()、containsValue()、keySet()、values()、size() 元素 可重复 不可重复（用equals()判断） key不可重复 顺序 有序 无序（实际上有HashCode决定） – 线程安全 Vector线程安全 – HashTable线程安全 HashMap 和 HashTable 有什么区别？ HashMap去掉了HashTable的contains方法，但是加上了containsValue()和containsKey()方法； HashMap是非线程安全的，HashTable是线程安全的，HashMap效率上比HashTable要高； HashMap允许空键值，而HashTable不允许。 说一下 HashMap 的实现原理？HashMap在JDK1.8之前底层是数组+链表的形式。HashMap通过key的hashCode经过扰动函数处理后得到的hash值，然后通过（n-1）&amp; hash 判断当前元素存放的位置，这里的n指的是数组的长度，如果当前位置存在元素的话，就判断该元素与要存入的元素的hash值以及key是否相同，如果相同的话，直接覆盖，不相同的话，通过拉链法解决冲突（拉链法就是遇到哈希冲突时，创建一个链表，将冲突的值加入到链表中）。 所谓的扰动函数就是HashMap的hash方法，使用扰动函数是为了防止一些实现比较差的hashCode()方法，其目的就是为了较少碰撞。不然遇到实现比较差的hashCode()方法的key，大量的落在同一个存放位置，会使得链表过长，查询效率低。 在JDK1.8之后，HashMap的底层使用数组+链表+红黑树的形式。当链表的长度大于阈值（默认是8）的时候，就会转化为红黑树，以减少搜索时间。TreeMap、TreeSet的底层也用到了红黑树，红黑树相较于二叉树，解决了在特殊情况下二叉树退化成一个线性结构的缺陷。 HashMap 的长度为什么是2的幂次方？如果直接通过hash值来决定元素的存放位置，hash值的范围大约在-21亿到21亿之间，虽然发生碰撞的几率很小，但是40亿长度的数组，内存是放不下的。所以做了对数组长度的取模运算，得到的余数来作为元素的存放位置。在取余操作时，如果除数是2的幂次，则等于其与其除数减一的&amp;操作，所以hash%n=（n-1）&amp;hash 的前提是n需要是2的n次方，采用&amp;运算要比%运算效率高，所以HashMap的长度是2的幂次方。 HashMap 线程安全么？HashMap的线程是不安全的。 可以使用Conllections.synchronizedMap(hashMap)的方式，来返回一个线程安全的Map。 也可以使用HashTable，它是线程安全的。 推荐的是直接使用ConcurrentHashMap来避免线程不安全的问题。 ConcurrentHashMap 和 Hashtable 的区别？ 底层结构上不同：ConcurrentHashMap跟HashMap一样，在1.8之前，是 分段的数组+链表 的形式，在1.8之后，是 分段的数组+链表+红黑树 的形式。而HashTable是 数组+链表 的形式。 实现线程安全的方式不同：ConcurrentHashMap在JDK1.7的时候，使用的分段锁SegMent，将整个桶的数据进行分段，每段数据都有各自的锁来控制并发访问。在JDK1.8之后，摒弃了分段锁，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用synchronized和CAS来操作。而HashTable使用的同一把锁，串行执行，当多线程操作同一个HashTable时，会出现阻塞轮休等待的情况，效率比较低。 说一下 HashSet 的实现原理？HashSet的底层是基于HashMap实现的，HashSet会将加入的对象作为key放到一个HashMap中，HashMap的value统一为PRESENT（一个final的Object对象）。 当对象加入HashSet时，HashSet会先计算对象的hashcode值来判断元素添加的位置，同时也会有其他加入的对象的hashcode值进行比较，如果hashcode值相同，会调用对象的equal()方法进行比较，如果还相同，则不会进行加入操作。 说一说HashMap和ArrayList的扩容机制？HashMap默认大小16，负载因子是0.75，也就是160.75=12，超过12大小时就会触发扩容，扩容的大小时之前的一倍即 2。 ArrayList默认初始大小为10，当添加第11个元素的时候，进行扩容，扩容的大小时之前的1.5倍。 https://www.cnblogs.com/cai170221/p/13371975.html?utm_source=tuicool ArrayList 和 LinkedList 的区别是什么？ 线程不安全：ArrayList和LinkedList都是不同步的，也就是不保证线程安全的。 底层数据结构：ArrayList底层数据结构是Object数组（查询快，增删慢），LinkedList底层数据结构是双向链表（查询慢，增删快）。 是否支持快速随机访问：ArrayList支持，LinkedList不支持。 ArrayList实现了RandomAccess接口，该接口没有方法，只是一个标识，标识实现这个接口的类具有随机访问的功能。具体应用可以查看Collections源码中的二分搜索方法。 对于实现了RandomAccess接口的list，优先使用for循环遍历，其次foreach。没有实现RandomAccess接口的list，优先选择iterator遍历。大size的数据，不要使用普通for循环。 如何实现数组和 List 之间的转换？ 数组转List：调用Arrays的asList方法。 List转数组：调用ArrayList的toArray方法。 ArrayList 和 Vector 的区别是什么？ArrayList是线程不安全的，Vector是线程安全的，Vector类里面所有的方法都是同步的，多线程的情况下能够保证数据安全，但是同步操作会消耗时间，效率低。所以不涉及多线程，不需要保证线程安全的时候，建议使用更高效的ArrayList。 Array 和 ArrayList 有何区别？ Array可以存放基本类型和对象，而ArrayList只能存放对象。 Array是指定大小的，而ArrayList大小可以动态扩容。 Array没有ArrayList那么多的功能，比如addAll，removeAll和iterator等。 迭代器 Iterator 是什么？首先说一下迭代器模式，它是 Java 中常用的设计模式之一。用于顺序访问集合对象的元素，无需知道集合对象的底层实现。 Iterator 是可以遍历集合的对象，为各种容器提供了公共的操作接口，隔离对容器的遍历操作和底层实现，从而解耦。 缺点是增加新的集合类需要对应增加新的迭代器类，迭代器类与集合类成对增加。 Iterator 怎么使用？有什么特点？通过调用iterator()方法，返回一个iterator对象。该对象常用的方法： next()：获取序列中下一个元素。 hasNext()：检查序列中是否还有元素。 remove()：将迭代器新返回的元素删除。 Iterator 和 ListIterator 有什么区别？ ListIterator实现了Iterator接口，并包含其他的功能。比如：增加元素，替换元素，获取前一个和后一个元素的索引等等。 Iterator 可以遍历Set和List集合，ListIterator只能遍历List集合。 Iterator 只能向前遍历，ListIterator可以向前也可以向后遍历。]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（五）Linux]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89Linux%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（五）Linux常用的查看文件内容命令有哪些？tail cat more vi vim 怎么查找特定的文件？find命令 语法：find path [options] params 作用：在指定目录下查找文件 举例： find ~ -name “target.java” //精确查找文件 find ~ -name “target*” //模糊查找文件 find ~ -iname “target*” //不区分文件名大小写去查找文件 检索文件内容？grep命令（Global Regular Expression Print） 语法：grep [options] pattern file 作用：查找文件里符合条件的字符串 举例： grep ‘test’ target.log //查找target.log文件里有“test”字符串的行 grep -o ‘[a-zA-Z0-9-]’ //根据正则表达式进行匹配查找 grep -v ‘test’ //找到不匹配“test”的行 grep经常搭配 管道操作符 | 作用：可将指令连接起来，前一个指令的输出作为后一个指令的输入 举例： ps -ef | grep tomcat //查找tomcat进程 对文件内容做统计？awk命令 语法：awk [options] ‘cmd’ file 作用： 一次读取一行文本，对输入分隔符进行切片，切成多个组成部分； 将切片直接保存在内建的变量中，$1,$2…($0表示行的全部)； 支持对单个切片的判断，支持循环判断，默认分隔符为空格； 举例： awk ‘{print $1,$4}’ netstat.txt //默认以空格为分隔符对每行数据切片后，输出第1和第4列数据 awk -F “,” ‘{print $1,$4}’ netstat.txt //以”,为分隔符对每行数据切片后，输出第1和第4列数据 awk ‘$1==”tcp” &amp;&amp; $2==1 {print $0}’ netstat.txt //输出第1列数据为”tcp“，第2列数据为1的所有行数据 awk ‘{arr[$1]++}END{for(i in arr)print i “\t” arr[i]}’ //定义了一个名字叫arr的数组，$1中遇到相同项就加一，然后循环输出个数 批量替换文本内容？sed命令（stream editor 流编辑器） 语法：sed [options] ‘sed command’ filename 作用：适合用于对文本的行内容进行处理]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（十一）SpringMVC]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89SpringMVC%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（十一）SpringMVCSpringMVC的工作原理（执行流程）是什么？ 客户端（常见的如浏览器）发送请求，直接请求到前端控制器DispatcherServlet。 DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handler。 处理器映射器根据请求url找到具体的处理器，生成处理器对象以及处理器拦截器（如果有则生成）一并返回给DispatcherServlet。 DispatcherServlet调用HandlerAdapter处理器适配器。 HandlerAdapter会根据Handler来调用真正的处理器开始处理请求，并处理相应的业务逻辑。 处理器处理完业务后，会返回一个ModelAndView对象给DispatcherServlet，Model是返回的数据对象，View是一个逻辑上的View。 DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析。 ViewResolver会根据逻辑上的View，查找实际的View。 DispatcherServlet对View进行渲染视图（将模型数据填充至视图中）。 将View返回给请求者。 SpringMVC中如何解决GET|POST请求中文乱码问题？ GET 每次发送请求之前对URL进行编码：比如encodeURI()方法； 更简便的方法，在服务器端配置tomcat的server.xml文件，增加URIEncoding=“UTF-8”，然后重启tomcat即可。 POST 可以每次在request解析数据时设置编码格式：request.setCharacterEncoding(“utf-8”)； 可以使用编码过滤器解决，最常用的方法是使用Spring提供的编码过滤器，在web.xml里面添加如下配置： 123456789101112&lt;filter&gt; &lt;filter-name&gt;charsetFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt; 该过滤器做的其实就是强制为请求和响应设置编码格式： request.setCharacterEncoding(“utf-8”);response.setCharacterEncoding(“utf-8”); SpringMVC怎样设定重定向和转发的？在返回值前面加上redirect:（重定向）或者forward:（请求转发）。 SpringMVC如何做异常处理？可以将异常抛给Spring框架来处理，自定义实现Spring框架的全局异常解析器HandlerExceptionResolver。]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（十）Spring]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%8D%81%EF%BC%89Spring%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（十）Spring什么是Spring？列举一些重要的Spring模块？ Spring Core：Spring框架的基础，可以说Spring其他的所有功能都需要依赖于该类库。主要提供IOC依赖注入功能。 Spring Aspects：该模块为与Aspects的集成提供支持。 Spring AOP：提供了面向切面的编程实现。 Spring JDBC：Java数据库连接。 Spring JMS：Java消息服务。 Spring ORM：用于支持Hibernate等ORM工具。 Spring Web：为创建Web应用程序提供支持。 Spring Test：提供了对Junit和TestNG测试的支持。 @Controller vs @RestController ？ @Controller返回的是一个页面，配合@ResponseBody注解返回对象数据。一般前后端不分离的项目使用居多。 @RestController返回的Json或者Xml形式数据，相当于@Controller+@ResponseBody的组合，对象数据直接以Json或者Xml形式写入到HTTP响应（Response）中，RESTFul风格的web服务，应用于前后端分离的情况。 @RestController是在Spring 4之后新加的注解。 @ResponseBody注解的作用是将Controller的方法返回的对象通过适当的转换器转换成指定的格式后，写入到HTTP响应（Response）对象的body中，通常返回Json格式居多。 谈谈对IOC和AOP的理解？Spring中bean的作用域有哪些？ singleton：唯一bean模式，Spring中的bean默认都是单例的。 prototype：针对每个getBean请求都会创建一个新的bean实例。 request：每一次HTTP请求都会创建一个新的bean实例，该bean仅在当前HTTP Request内有效。 session：会为每个session创建一个bean实例，该bean仅在当前HTTP Session内有效。 global-session：会为每个全局Http session创建一个bean实例，该作用域仅对基于Portlet的web应用有意义，不过Portlet在Spring5已经没有了。 Spring中的单例bean的线程安全吗？不安全，大部分时候我们并没有在系统中使用多线程，所以很少有⼈会关注这个问题。单例 bean 存在线程问题，主要是因为当多个线程操作同⼀个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题。 常见的方法有两种： 在Bean对象中尽量不使用可变的成员变量（不太现实）。 在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal中（推荐的一种方式）。 @Component 和 @Bean 的区别是什么？ 作用的对象不同。@Component注解作用于类，而@Bean注解作用于方法。 @Component通常是通过类路径来自动侦测以及自动装配到Spring容器中（可以通过@ComponentScan注解定义要扫描的路径从中找出标识了需要装配的类自动装配到Spring容器中，SpringBoot项目启动类的@SpringBootApplication注解已经包含了@ComponentScan注解）。@Bean注解通常是我们在标有该注解的方法中定义产生这个Bean。 @Bean注解比@Component注解的自定义性更强。而且很多地方只能通过@Bean注解来注册Bean，比如当我们引用第三方类库的类需要装配到Spring容器中时，就只能通过@Bean来实现。 将⼀个类声明为Spring的 bean 的注解有哪些？ @Component：通用的注解，可标注任意类为Spring组件，如果一个bean不知道用于哪一层，可以使用@Component注解标注； @Repository：对应持久层即Dao层，主要用于数据库相关操作； @Service：对应服务层，主要处理一些复杂的业务逻辑，需要用到Dao层； @Controller：对应Spring MVC的控制层，主要接收用户的请求并调用Service层处理后返回结果。 Spring中Bean的声明周期？Spring中都用到了哪些设计模式？ 工厂模式：Spring使用工厂模式通过BeanFactory、ApplicationContext来创建Bean对象； 单例模式：Spring中的Bean默认就是单例的； 代理模式：Spring的AOP功能实现； 包装器模式： 观察者模式： 适配器模式： Spring管理事务的方式有哪几种？ 编程式事务，在代码中硬编码。（不推荐使用） 声明式事务，在配置文件中配置。（推荐使用） 基于XML的声明式事务 基于注解的声明式事务 Spring 事务中的隔离级别有哪几种？Spring 事务中哪几种事务传播行为？@Transactional(rollbackFor = Exception.class)注解了解吗？]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题汇总（四）Redis]]></title>
    <url>%2F2019%2F03%2F13%2Fjava%E9%9D%A2%E8%AF%95%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89Redis%2F</url>
    <content type="text"><![CDATA[Java面试题汇总（四）RedisRedis和Memecache有什么区别？Redis支持 为什么Redis能这么快？Redis的使用场景都有哪些？ 缓存 计数器 排行榜，去top n个数据 pub、sub发布订阅构建实时消息系统 构建消息队列 精确的设置过期时间 各数据类型的应用场景： String：缓存、限流、计数器、分布式锁、分布式Session Hash：存储用户信息、用户主页访问量、组合查询 List：微博关注人时间轴列表、简单队列 Set：赞、踩、标签、好友关系 Zset：排行榜]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试题</tag>
        <tag>面试</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快进来看看]]></title>
    <url>%2F2019%2F02%2F18%2Fwork4j%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客~Work For Java~ 起源本人帅气java开发工程师一只，关于博客，自己在博客园、csdn等都注册有账号，但是一直想自己写一个博客程序，因为感觉这样比较骚气。鼓捣了很多次，受限于很多原因，比如木有money去买云服务器、对于博客的设计要求高、工作忙、生活忙等等（其实就是懒），最终不了了之。 网上冲浪的时候，经常浏览一些他人的个人博客，看一些技术类的文章，偶然一个机会看到一篇博客的评论里有人问到博主：“请问博主这个网站使用什么框架开发的，我也想学下，谢谢！”，在博主的回复里，得知了hexo。然后百度了后发现了新大陆，原来辣么多的个人博客是这样来的。当天就搭建起了这个博客，主题选了见过很多次的next。下面是链接： HEXO博客框架 NEXT主题 规划博客的内容三大部分： java技术栈（java涉及的知识点） 项目实战（框架应用的实战，就从“work4j社区”项目开始吧，比较实用，希望后面会有人使用） 生活杂谈（更多是搞笑的，正能量的文章，不涉及个人感情的东西，因为我有很多小秘密，不能告诉你~=。=） 计划每个人都有工作，生活中还有许多琐事，但是自己该总结的还是要总结。技术是不断改进的，自己的知识储备不更新，不积累，不与时俱进，那。那。。那。。。就太可怕了~ 6:00-7:00——博客时间 19:00-20:30——coding时间]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客的搭建与维护]]></title>
    <url>%2F2018%2F09%2F03%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2Findex%2F</url>
    <content type="text"><![CDATA[工欲善其事，必先利其器，所以写博客之前，先要熟悉下写博客中间常用的一些配置、语法和命令。其实就是我自己老是记不住（=。=），好记性不如烂笔头，所以还是老老实实记下来吧。既然是关于博客的，那索性就把博客搭建的过程也记下来，方便各位有兴趣的也能搭建一个自己的博客。 Hexo博客的搭建Hexo官方网站上也有文档，官方文档地址，可以去了解下。下面是具体的搭建过程，按照这个下来，保证能搭建成功。 真不成功的话，那就忽略上面说的话。（是不是很严谨，=。=） 安装node.jsHexo是基于nodeJS环境的静态博客，官方要求，所以老老实实的安装了吧，我的电脑系统是windows的，所以下面是windows的安装说明： node.js下载地址 下载好msi文件后，双击打开安装，一路next，不过在Custom Setup这一步记得选Add to PATH,这样你就不用自己去配置电脑上环境变量了。 装完后按 win + r 快捷键调出【运行】，然后输入cmd后点确定，在cmd中输入查看版本命令：node -v 能够查看到node版本后就算安装成功了。 安装git安装hexo发布博客的常用配置基础主题博客里添加本地图片Markdown语法把本地博客文档上传至githubgit命令]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[equals()和hashCode()的区别]]></title>
    <url>%2F2018%2F06%2F20%2Fjava%E6%8A%80%E6%9C%AF%E6%A0%88%2Fequals%E5%92%8ChashCode%2F</url>
    <content type="text"><![CDATA[equals()和hashCode()的区别]]></content>
      <tags>
        <tag>java</tag>
        <tag>技术栈</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[equals()和==的区别]]></title>
    <url>%2F2018%2F06%2F20%2Fjava%E6%8A%80%E6%9C%AF%E6%A0%88%2Fequals%E5%92%8C%E7%AD%89%E7%AD%89%2F</url>
    <content type="text"><![CDATA[equals()和==的区别]]></content>
      <tags>
        <tag>java</tag>
        <tag>技术栈</tag>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java技术栈]]></title>
    <url>%2F2018%2F06%2F14%2Fjava%E6%8A%80%E6%9C%AF%E6%A0%88%2Fjava%E6%8A%80%E6%9C%AF%E6%A0%88%2F</url>
    <content type="text"><![CDATA[一直在纠结怎样去系统的整理一下java知识。百度了一堆，偶然发现一个词——”技术栈“。然后就开始纠结，哪个java技术栈整理的流行且全面。感觉再这样纠结下去，time flies~，还是赶紧动起来，一点一滴的积累，沉淀。 java基础基础 字符串常量池 equals()和==的区别 equals()和hashCode()的区别]]></content>
      <tags>
        <tag>java</tag>
        <tag>技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符串常量池]]></title>
    <url>%2F2018%2F06%2F14%2Fjava%E6%8A%80%E6%9C%AF%E6%A0%88%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[字符串问题在面试过程中经常被问到，当然也算是日常coding中非常常用的了，下面分析一波字符串常量池。 JVM为了减少字符串对象的重复创建，其维护了一个特殊的内存，这段内存被称为字符串常量池。 java中字符串对象创建有两种形式： 一种为字面量形式，如String str=” wsp”； 另一种就是使用标准的构造对象的方法，如String str=new String（”wsp”）； 工作原理当代码中出现字面量形式创建字符串对象时，JVM就会首先对这个字面量进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回，否则新的字符串对象就被创建，然后将这个引用放入字符串常量池中，并返回该引用。 String str1=”wan”; JVM检测这个字面量，这里我们认为没有内容为“wan”的对象存在。JVM通过字符串常量池查找不到内容为”wan”的字符串对象存在，那么会创建这个字符串对象，然后将刚创建的对象的引用放入到字符串常量池中，并且将引用返回给变量str1。 String str2=”wan”; 同样JVM还是要检测这个字面量，JVM通过查找字符串常量池，发现内容为”wan”字符串对象存在，于是将已经存在的字符串对象的引用返回给变量str2。注意这里不会重新创建新的字符串对象。 验证是否为str1和str2是否指向同一对象，我们可以通过这段代码 System.out.println(str1 == str2); 结果为true。 String str3 = new String(“wan”) 当我们使用了new来构造字符串对象的时候，不管字符串常量池中有没有相同内容的对象的引用，新的字符串对象都会创建。因此我们使用下面代码测试一下， String str3 = new String(“wan”);System.out.println(str1 == str3); 结果如我们所想，为false，表明这两个变量指向的为不同的对象。 intern 对于上面使用new创建的字符串对象，如果想将这个对象的引用加入到字符串常量池，可以使用intern方法。 调用intern后，首先检查字符串常量池中是否有该对象的引用，如果存在，则将这个引用返回给变量，否则将引用加入并返回给变量。 String str4 = str3.intern(); System.out.println(str4 == str1); 输出的结果为true。 前提条件？ 字符串常量池实现的前提条件就是Java中String对象是不可变的，这样可以安全保证多个变量共享同一个对象。如果Java中的String对象可变的话，一个引用操作改变了对象的值，那么其他的变量也会受到影响，显然这样是不合理的。 引用 or 对象 字符串常量池中存放的时引用还是对象，这个问题是最常见的。字符串常量池存放的是对象引用，不是对象。在Java中，对象都创建在堆内存中。]]></content>
      <tags>
        <tag>java</tag>
        <tag>技术栈</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot目录]]></title>
    <url>%2F2018%2F06%2F14%2Fspringboot%2Fspringboot%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[work4j社区项目破蛋~]]></title>
    <url>%2F2018%2F06%2F14%2Fwork4j%2F%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[下面介绍下，work4j社区项目如何快速的破蛋而出。 功能设计如何快速呢，嗯……一切从简就能快速啦，所以功能咱就设计的简单点，但是该有的还是要有的。 用户 用户的介绍就省略了吧，略略略~~ 帖子 帖子的介绍也省略了吧，略略略~~ 栏目 帖子属于哪个栏目（java，springBoot，技术交流、资源分享、吐槽灌水等等），略略略~~ 回复 没有回复就没有互动，没有互动就没有emm…，略略略~~ 收藏 好帖子当然要收藏啦，不小心点错了必须要取消收藏=。= 关注 喜欢他她它，就要关注他她它。 附件 上传的图片、附件统一管理。 数据库设计 用户 | 字段 | 类型 | 名称 | 备注 || :–: | :–: | :–: | :–: || 1 | 2 | 3 | 4 || 5 | 6 | 7 | 8 || 9 | | -3 | =11 | 帖子 栏目 回复 收藏 关注 附件 框架选择可以看出，初期社区的功能相当简单了。让思路比较清晰些，采用前后端分离的方案。 后端框架：springboot（快速开发） 前端框架：vue、angularjs、react等这些前端框架，我通通不会=。=，那就老老实实的写原生的吧。mvvm框架不懂，但是UI框架还是需要的，毕竟 I just java开发，UI框架的话，推荐 Layui 传送门，Layui也有相应的社区模板 传送门，真是棒棒哒。 数据库：mysql 代码生成器你还在为写大量的重复增删改查代码而烦恼吗，使用代码生成器吧，像mybatis有自己的Generator自动生成Dao、Model、Mapping相关文件，咱们这里更高级一些，除了这些，把其他代码也一并生成。这里介绍使用rapid-generator。 基础代码 登录 用户的介绍就省略了吧，略略略~~ 文件上传/下载 帖子的介绍也省略了吧，略略略~~ 工具类 帖子属于哪个栏目（java，springBoot，技术交流、资源分享、吐槽灌水等等），略略略~~ 后台代码前端代码work4j社区项目进化~work4j社区项目超进化~work4j社区项目究极进化~]]></content>
      <tags>
        <tag>work4j社区</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swagger2常用注解]]></title>
    <url>%2F2018%2F06%2F14%2Fswagger2%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132@Api：用在请求的类上，表示对类的说明 tags="说明该类的作用，可以在UI界面上看到的注解" value="该参数没什么意义，在UI界面上也看到，所以不需要配置"@ApiOperation：用在请求的方法上，说明方法的用途、作用 value="说明方法的用途、作用" notes="方法的备注说明"@ApiImplicitParams：用在请求的方法上，表示一组参数说明 @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面 name：参数名 value：参数的汉字说明、解释 required：参数是否必须传 paramType：参数放在哪个地方 · header --&gt; 请求参数的获取：@RequestHeader · query --&gt; 请求参数的获取：@RequestParam · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable · body（不常用） · form（不常用） dataType：参数类型，默认String，其它值dataType="Integer" defaultValue：参数的默认值@ApiResponses：用在请求的方法上，表示一组响应 @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息 code：数字，例如400 message：信息，例如"请求参数没填好" response：抛出异常的类@ApiModel：用于响应类上，表示一个返回响应数据的信息 （这种一般用在post创建的时候，使用@RequestBody这样的场景， 请求参数无法使用@ApiImplicitParam注解进行描述的时候） @ApiModelProperty：用在属性上，描述响应类的属性 1、@Api：用在请求的类上，说明该类的作用123@Api：用在请求的类上，说明该类的作用 tags="说明该类的作用" value="该参数没什么意义，所以不需要配置" 示例： 1@Api(tags="APP用户注册Controller") 2、@ApiOperation：用在请求的方法上，说明方法的作用123@ApiOperation："用在请求的方法上，说明方法的作用" value="说明方法的作用" notes="方法的备注说明" 示例： 1@ApiOperation(value="用户注册",notes="手机号、密码都是必输项，年龄随边填，但必须是数字") 3、@ApiImplicitParams：用在请求的方法上，包含一组参数说明12345678910111213@ApiImplicitParams：用在请求的方法上，包含一组参数说明 @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息 name：参数名 value：参数的汉字说明、解释 required：参数是否必须传 paramType：参数放在哪个地方 · header --&gt; 请求参数的获取：@RequestHeader · query --&gt; 请求参数的获取：@RequestParam · path（用于restful接口）--&gt; 请求参数的获取：@PathVariable · body（不常用） · form（不常用） dataType：参数类型，默认String，其它值dataType="Integer" defaultValue：参数的默认值 示列： 12345@ApiImplicitParams(&#123; @ApiImplicitParam(name="mobile",value="手机号",required=true,paramType="form"), @ApiImplicitParam(name="password",value="密码",required=true,paramType="form"), @ApiImplicitParam(name="age",value="年龄",required=true,paramType="form",dataType="Integer")&#125;) 4、@ApiResponses：用于请求的方法上，表示一组响应12345@ApiResponses：用于请求的方法上，表示一组响应 @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息 code：数字，例如400 message：信息，例如"请求参数没填好" response：抛出异常的类 示例： 12345@ApiOperation(value = "select1请求",notes = "多个参数，多种的查询参数类型")@ApiResponses(&#123; @ApiResponse(code=400,message="请求参数没填好"), @ApiResponse(code=404,message="请求路径没有或页面跳转路径不对")&#125;) 5、@ApiModel：用于响应类上，表示一个返回响应数据的信息1234@ApiModel：用于响应类上，表示一个返回响应数据的信息 （这种一般用在post创建的时候，使用@RequestBody这样的场景， 请求参数无法使用@ApiImplicitParam注解进行描述的时候） @ApiModelProperty：用在属性上，描述响应类的属性 示例: 12345678910111213141516171819import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;import java.io.Serializable;@ApiModel(description= "返回响应数据")public class RestMessage implements Serializable&#123; @ApiModelProperty(value = "是否成功") private boolean success=true; @ApiModelProperty(value = "返回对象") private Object data; @ApiModelProperty(value = "错误编号") private Integer errCode; @ApiModelProperty(value = "错误信息") private String message; /* getter/setter */&#125;]]></content>
      <categories>
        <category>开源框架</category>
      </categories>
      <tags>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea使用手册]]></title>
    <url>%2F2018%2F06%2F12%2Fidea%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[使用idea已经有很长一段时间了，下面记录一下常用的配置吧~ 设置篇 更改IntelliJ IDEA生成的注释的user的默认值 1、file –&gt; settings –&gt; File and Code Templates2、中间的，选择 includes ，选中File Header。3、右侧会出现 Created by ${USER} on ${DATE}.4、把这个 ${USER} 直接替换掉 Created by myname on ${DATE}. 插件篇 lombok插件]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MQ的基本概念]]></title>
    <url>%2F2018%2F06%2F12%2FRabbitMQ%2FMQ%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[MQ的基本概念 MQ概述 MQ全称 Message Queue（消息队列），是在消息的传输过程中保存消息的容器。多用于分布式系统直接进行通信。 MQ，消息队列，存储消息的中间件 分布式系统通信两种方式：直接远程调用 和 借助第三方（MQ就是）完成间接通信 发送方成为生产者，接收方称为消费者 MQ的优势和劣势 优势： 应用解耦（系统的耦合性越高，容错性就越低，可维护性就越低，提高系统容错性和可维护性） 异步提速（提升用户体验和系统吞吐量，即单位时间内处理请求的数目） 削峰填谷（可以提高系统稳定性） 劣势： 系统可用性降低 系统复杂度提高 一致性问题 既然MQ有优势也有劣势，那么使用MQ需要满足什么条件呢？ 1.]]></content>
      <tags>
        <tag>MQ</tag>
        <tag>RabbitMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo安装部署流程]]></title>
    <url>%2F2018%2F06%2F09%2Finstall%2F</url>
    <content type="text"><![CDATA[安装部署流程~Work For Java~]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>bbb</tag>
      </tags>
  </entry>
</search>
